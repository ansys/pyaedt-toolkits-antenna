[
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property BowTieNormal.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "RectangularPatchInset.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "EPlane.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "RectangularPatchProbe.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "HPlane.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "Archimedean.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "RectangularPatchInset.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "RectangularPatchInset.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property AxialMode.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property Elliptical.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "HPlane.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Conical.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "Pyramidal.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.update_hfss_parameters",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.update_hfss_parameters.html#update_hfss_parameters",
        "title": "update_hfss_parameters",
        "section": "update_hfss_parameters",
        "text": "Update parameters in HFSS.\nKey.\nValue.\nTrue when successful, False when failed.\nupdate_hfss_parameters\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.update_hfss_parameters",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.update_hfss_parameters.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.update_hfss_parameters",
        "title": "update_hfss_parameters > update_hfss_parameters > update_hfss_parameters",
        "section": "update_hfss_parameters > update_hfss_parameters",
        "text": "ToolkitBackend.update_hfss_parameters(key: str, val: str) -> bool\n\nUpdate parameters in HFSS.\n\nParameters\n\nkey\n\npython:str\n\nKey.\n\nval\n\npython:str\n\nValue.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.api import ToolkitBackend\n>>> import time\n>>> toolkit = ToolkitBackend()\n>>> msg1 = toolkit_api.launch_thread(toolkit.launch_aedt)\n>>> idle = toolkit_api.wait_to_be_idle()\n>>> toolkit.get_antenna(\"BowTie\")\n>>> msg3 = toolkit.update_hfss_parameters()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "BowTieNormal.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "HPlane.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property RectangularPatchEdge.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property RectangularPatchProbe.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.html#rectangularpatchedge",
        "title": "RectangularPatchEdge",
        "section": "RectangularPatchEdge",
        "text": "Manages a rectangular patch edge antenna.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material. If the material is not defined,\na new material, parametrized, is created.\nThe default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 1.575.\nWhether to create a parametrized antenna. The default is True.\nPatch antenna object.\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\nRectangularPatchEdge.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nRectangularPatchEdge.create_lattice_pair([...])\nCreate a lattice pair box.\nRectangularPatchEdge.duplicate_along_line(vector)\nDuplicate the object along a line.\nRectangularPatchEdge.init_model()\nCreate a radiation boundary.\nRectangularPatchEdge.model_disco()\nModel in PyDiscovery.\nRectangularPatchEdge.model_hfss()\nDraw a rectangular patch edge antenna inset fed.\nRectangularPatchEdge.set_variables_in_hfss([...])\nCreate HFSS design variables.\nRectangularPatchEdge.setup_disco()\nSet up the model in PyDiscovery.\nRectangularPatchEdge.setup_hfss()\nSet up an antenna in HFSS.\nRectangularPatchEdge.synthesis()\nAntenna synthesis.\nRectangularPatchEdge.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nRectangularPatchEdge.antenna_type\n\nRectangularPatchEdge.coordinate_system\nReference coordinate system.\nRectangularPatchEdge.frequency\nCenter frequency.\nRectangularPatchEdge.frequency_unit\nFrequency units.\nRectangularPatchEdge.length_unit\nLength unit.\nRectangularPatchEdge.material\nSubstrate material.\nRectangularPatchEdge.material_properties\nSubstrate material properties.\nRectangularPatchEdge.name\nAntenna name.\nRectangularPatchEdge.origin\nAntenna origin.\nRectangularPatchEdge.outer_boundary\nOuter boundary.\nRectangularPatchEdge.substrate_height\nSubstrate height.\nRectangularPatchEdge\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n1.575\noptional\nTrue\naedt.toolkits.antenna.RectangularPatchEdge\nRectangularPatchEdge.create_3dcomponent\nRectangularPatchEdge.create_lattice_pair\nRectangularPatchEdge.duplicate_along_line\nRectangularPatchEdge.init_model\nRectangularPatchEdge.model_disco\nRectangularPatchEdge.model_hfss\nRectangularPatchEdge.set_variables_in_hfss\nRectangularPatchEdge.setup_disco\nRectangularPatchEdge.setup_hfss\nRectangularPatchEdge.synthesis\nRectangularPatchEdge.update_synthesis_parameters\nRectangularPatchEdge.antenna_type\nRectangularPatchEdge.coordinate_system\nRectangularPatchEdge.frequency\nRectangularPatchEdge.frequency_unit\nRectangularPatchEdge.length_unit\nRectangularPatchEdge.material\nRectangularPatchEdge.material_properties\nRectangularPatchEdge.name\nRectangularPatchEdge.origin\nRectangularPatchEdge.outer_boundary\nRectangularPatchEdge.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge",
        "title": "RectangularPatchEdge > RectangularPatchEdge > RectangularPatchEdge",
        "section": "RectangularPatchEdge > RectangularPatchEdge",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge(*args, **kwargs)\n\nManages a rectangular patch edge antenna.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material. If the material is not defined,\na new material, parametrized, is created.\nThe default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 1.575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.RectangularPatchEdge\n\nPatch antenna object.\n\nNotes\n\n1\n\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.patch import RectangularPatchEdge\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = RectangularPatchEdge(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRectangularPatchEdge.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nRectangularPatchEdge.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nRectangularPatchEdge.duplicate_along_line(vector)\n\nDuplicate the object along a line.\n\nRectangularPatchEdge.init_model()\n\nCreate a radiation boundary.\n\nRectangularPatchEdge.model_disco()\n\nModel in PyDiscovery.\n\nRectangularPatchEdge.model_hfss()\n\nDraw a rectangular patch edge antenna inset fed.\n\nRectangularPatchEdge.set_variables_in_hfss([...])\n\nCreate HFSS design variables.\n\nRectangularPatchEdge.setup_disco()\n\nSet up the model in PyDiscovery.\n\nRectangularPatchEdge.setup_hfss()\n\nSet up an antenna in HFSS.\n\nRectangularPatchEdge.synthesis()\n\nAntenna synthesis.\n\nRectangularPatchEdge.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nRectangularPatchEdge.antenna_type\n\n\n\nRectangularPatchEdge.coordinate_system\n\nReference coordinate system.\n\nRectangularPatchEdge.frequency\n\nCenter frequency.\n\nRectangularPatchEdge.frequency_unit\n\nFrequency units.\n\nRectangularPatchEdge.length_unit\n\nLength unit.\n\nRectangularPatchEdge.material\n\nSubstrate material.\n\nRectangularPatchEdge.material_properties\n\nSubstrate material properties.\n\nRectangularPatchEdge.name\n\nAntenna name.\n\nRectangularPatchEdge.origin\n\nAntenna origin.\n\nRectangularPatchEdge.outer_boundary\n\nOuter boundary.\n\nRectangularPatchEdge.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "EPlane.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.stripline_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.stripline_calculator.html#stripline_calculator",
        "title": "stripline_calculator",
        "section": "stripline_calculator",
        "text": "Use the strip line calculator to calculate line width.\nSubstrate height.\nSubstrate permittivity.\nImpedance. The default is 50.0.\nLine width.\nstripline_calculator\npython:float\npython:float\npython:str\noptional\n50.0\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.stripline_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.stripline_calculator.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.stripline_calculator",
        "title": "stripline_calculator > stripline_calculator > stripline_calculator",
        "section": "stripline_calculator > stripline_calculator",
        "text": "TransmissionLine.stripline_calculator(substrate_height, permittivity, impedance=50.0)\n\nUse the strip line calculator to calculate line width.\n\nParameters\n\nsubstrate_height\n\npython:float\n\nSubstrate height.\n\npermittivity\n\npython:float\n\nSubstrate permittivity.\n\nimpedance\n\npython:str, optional\n\nImpedance. The default is 50.0.\n\nReturns\n\npython:float\n\nLine width.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "RectangularPatchEdge.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property Pyramidal.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property QuadRidged.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.wait_to_be_idle.html#wait_to_be_idle",
        "title": "wait_to_be_idle",
        "section": "wait_to_be_idle",
        "text": "Wait for the thread to be idle and ready to accept a new task.\nTime out in seconds. The default is 60.\nwait_to_be_idle\npython:int\noptional\n60"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.wait_to_be_idle",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.wait_to_be_idle.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.wait_to_be_idle",
        "title": "wait_to_be_idle > wait_to_be_idle > wait_to_be_idle",
        "section": "wait_to_be_idle > wait_to_be_idle",
        "text": "ToolkitBackend.wait_to_be_idle(timeout: int = 60) -> bool\n\nWait for the thread to be idle and ready to accept a new task.\n\nParameters\n\ntimeout\n\npython:int, optional\n\nTime out in seconds. The default is 60.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property PyramidalRidged.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property RectangularPatchEdge.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property Archimedean.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property HPlane.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "Elliptical.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property Elliptical.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "Elliptical.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "Conical.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "HPlane.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.html#elliptical",
        "title": "Elliptical",
        "section": "Elliptical",
        "text": "Manages an elliptical horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nElliptical horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nElliptical.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nElliptical.create_lattice_pair([...])\nCreate a lattice pair box.\nElliptical.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nElliptical.init_model()\nCreate a radiation boundary.\nElliptical.model_disco()\nModel in PyDiscovery.\nElliptical.model_hfss()\nDraw elliptical horn antenna.\nElliptical.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nElliptical.setup_disco()\nSet up in PyDiscovery.\nElliptical.setup_hfss()\nSet up an antenna in HFSS.\nElliptical.synthesis()\nAntenna synthesis.\nElliptical.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nElliptical.antenna_type\n\nElliptical.coordinate_system\nReference coordinate system.\nElliptical.frequency\nCenter frequency.\nElliptical.frequency_unit\nFrequency units.\nElliptical.length_unit\nLength unit.\nElliptical.material\nHorn material.\nElliptical.material_properties\nSubstrate material properties.\nElliptical.name\nAntenna name.\nElliptical.origin\nAntenna origin.\nElliptical.outer_boundary\nOuter boundary.\nElliptical\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.EllipticalHorn\nElliptical.create_3dcomponent\nElliptical.create_lattice_pair\nElliptical.duplicate_along_line\nElliptical.init_model\nElliptical.model_disco\nElliptical.model_hfss\nElliptical.set_variables_in_hfss\nElliptical.setup_disco\nElliptical.setup_hfss\nElliptical.synthesis\nElliptical.update_synthesis_parameters\nElliptical.antenna_type\nElliptical.coordinate_system\nElliptical.frequency\nElliptical.frequency_unit\nElliptical.length_unit\nElliptical.material\nElliptical.material_properties\nElliptical.name\nElliptical.origin\nElliptical.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical",
        "title": "Elliptical > Elliptical > Elliptical",
        "section": "Elliptical > Elliptical",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical(*args, **kwargs)\n\nManages an elliptical horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.EllipticalHorn\n\nElliptical horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import PyramidalRidged\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = Elliptical(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = Elliptical(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nElliptical.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nElliptical.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nElliptical.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nElliptical.init_model()\n\nCreate a radiation boundary.\n\nElliptical.model_disco()\n\nModel in PyDiscovery.\n\nElliptical.model_hfss()\n\nDraw elliptical horn antenna.\n\nElliptical.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nElliptical.setup_disco()\n\nSet up in PyDiscovery.\n\nElliptical.setup_hfss()\n\nSet up an antenna in HFSS.\n\nElliptical.synthesis()\n\nAntenna synthesis.\n\nElliptical.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nElliptical.antenna_type\n\n\n\nElliptical.coordinate_system\n\nReference coordinate system.\n\nElliptical.frequency\n\nCenter frequency.\n\nElliptical.frequency_unit\n\nFrequency units.\n\nElliptical.length_unit\n\nLength unit.\n\nElliptical.material\n\nHorn material.\n\nElliptical.material_properties\n\nSubstrate material properties.\n\nElliptical.name\n\nAntenna name.\n\nElliptical.origin\n\nAntenna origin.\n\nElliptical.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property Conical.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "QuadRidged.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "RectangularPatchProbe.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "BowTieRounded.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.html#transmissionline",
        "title": "TransmissionLine",
        "section": "TransmissionLine",
        "text": "Provides base methods common to transmission line calculations.\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nTransmission line calculator object.\nTransmissionLine.microstrip_calculator(...)\nUse the micro strip line calculator to calculate line width and length.\nTransmissionLine.stripline_calculator(...[, ...])\nUse the strip line calculator to calculate line width.\nTransmissionLine.suspended_strip_calculator(...)\nUse the suspended strip line calculator to calculate effective permittivity.\nTransmissionLine\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\naedt.toolkits.antenna.common.TransmissionLine\nTransmissionLine.microstrip_calculator\nTransmissionLine.stripline_calculator\nTransmissionLine.suspended_strip_calculator"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine",
        "title": "TransmissionLine > TransmissionLine > TransmissionLine",
        "section": "TransmissionLine > TransmissionLine",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine(frequency=10, frequency_unit='GHz')\n\nProvides base methods common to transmission line calculations.\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nReturns\n\naedt.toolkits.antenna.common.TransmissionLine\n\nTransmission line calculator object.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.common import TransmissionLine\n>>> tl_calc = TransmissionLine(frequency=2)\n>>> tl_calc.stripline_calculator(substrate_height=10, permittivity=2.2, impedance=60)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nTransmissionLine.microstrip_calculator(...)\n\nUse the micro strip line calculator to calculate line width and length.\n\nTransmissionLine.stripline_calculator(...[, ...])\n\nUse the strip line calculator to calculate line width.\n\nTransmissionLine.suspended_strip_calculator(...)\n\nUse the suspended strip line calculator to calculate effective permittivity.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "Corrugated.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property RectangularPatchInset.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property RectangularPatchEdge.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property HPlane.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "Elliptical.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "PyramidalRidged.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.wg",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.wg.html#wg",
        "title": "wg",
        "section": "wg",
        "text": "wg"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.wg",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.wg.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.wg",
        "title": "wg > wg > wg",
        "section": "wg > wg",
        "text": "StandardWaveguide.wg = {'WR-10': [0.1, 0.05, 0.04], 'WR-102': [1.02, 0.51, 0.064], 'WR-112': [1.122, 0.497, 0.064], 'WR-1150': [11.5, 5.75, 0.125], 'WR-12': [0.122, 0.061, 0.04], 'WR-137': [1.372, 0.622, 0.064], 'WR-15': [0.148, 0.074, 0.04], 'WR-1500': [15.0, 7.5, 0.125], 'WR-159': [1.53, 0.795, 0.064], 'WR-1800': [18.0, 9.0, 0.125], 'WR-187': [1.872, 0.872, 0.064], 'WR-19': [0.188, 0.094, 0.04], 'WR-2100': [21.0, 10.5, 0.125], 'WR-22': [0.224, 0.112, 0.04], 'WR-229': [2.29, 1.145, 0.064], 'WR-2300': [23.0, 11.5, 0.15], 'WR-28': [0.28, 0.14, 0.04], 'WR-284': [2.84, 1.34, 0.08], 'WR-34': [0.34, 0.17, 0.04], 'WR-340': [3.4, 1.7, 0.08], 'WR-42': [0.42, 0.17, 0.04], 'WR-430': [4.3, 2.15, 0.08], 'WR-5': [0.051, 0.0255, 0.02], 'WR-51': [0.51, 0.255, 0.04], 'WR-510': [5.1, 2.55, 0.08], 'WR-62': [0.622, 0.311, 0.04], 'WR-650': [6.5, 3.25, 0.08], 'WR-7': [0.065, 0.0325, 0.02], 'WR-75': [0.75, 0.375, 0.05], 'WR-770': [7.7, 3.85, 0.125], 'WR-8': [0.08, 0.04, 0.02], 'WR-90': [0.9, 0.4, 0.05], 'WR-975': [9.75, 4.875, 0.125]}\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model the bowtie antenna in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "BowTieNormal.model_disco()\n\nModel the bowtie antenna in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property RectangularPatchProbe.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "Elliptical.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "Conical.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property Elliptical.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.release_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.release_aedt.html#release_aedt",
        "title": "release_aedt",
        "section": "release_aedt",
        "text": "Release AEDT.\nWhether to close the AEDT projects that are open in the session.\nThe default is True.\nWhether to close the active AEDT session on exiting AEDT.\nThe default is True.\nTrue when successful, False when failed.\nrelease_aedt\noptional\nTrue\noptional\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.release_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.release_aedt.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.release_aedt",
        "title": "release_aedt > release_aedt > release_aedt",
        "section": "release_aedt > release_aedt",
        "text": "ToolkitBackend.release_aedt(close_projects=False, close_on_exit=False)\n\nRelease AEDT.\n\nParameters\n\nclose_projects\n\nbool, optional\n\nWhether to close the AEDT projects that are open in the session.\nThe default is True.\n\nclose_on_exit\n\nbool, optional\n\nWhether to close the active AEDT session on exiting AEDT.\nThe default is True.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.release_aedt(True, True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_thread.html#launch_thread",
        "title": "launch_thread",
        "section": "launch_thread",
        "text": "Launch the thread.\nlaunch_thread"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_thread",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_thread.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_thread",
        "title": "launch_thread > launch_thread > launch_thread",
        "section": "launch_thread > launch_thread",
        "text": "ToolkitBackend.launch_thread(process, *args) -> ThreadManager\n\nLaunch the thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.suspended_strip_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.suspended_strip_calculator.html#suspended_strip_calculator",
        "title": "suspended_strip_calculator",
        "section": "suspended_strip_calculator",
        "text": "Use the suspended strip line calculator to calculate effective permittivity.\nSubstrate in meter.\nDielectric permittivity\nEffective permittivity.\nsuspended_strip_calculator\npython:float\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.suspended_strip_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.suspended_strip_calculator.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.suspended_strip_calculator",
        "title": "suspended_strip_calculator > suspended_strip_calculator > suspended_strip_calculator",
        "section": "suspended_strip_calculator > suspended_strip_calculator",
        "text": "TransmissionLine.suspended_strip_calculator(wavelength, w1, substrate_height, permittivity)\n\nUse the suspended strip line calculator to calculate effective permittivity.\n\nParameters\n\nwavelength\n\npython:float\n\n\n\nw1\n\npython:float\n\n\n\nsubstrate_height\n\npython:float\n\nSubstrate in meter.\n\npermittivity\n\npython:float\n\nDielectric permittivity\n\nReturns\n\npython:float\n\nEffective permittivity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_aedt_model",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_aedt_model.html#export_aedt_model",
        "title": "export_aedt_model",
        "section": "export_aedt_model",
        "text": "Export the model in the OBJ format and then encode the file if the encode parameter is enabled.\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\nWhether to export air and vacuum objects. The default is False.\nWhether to encode the file. The default is True.\nList of exported OBJ files or encoded data.\nexport_aedt_model\nencode\npython:list\noptional\nNone\npython:str\noptional\nNone\noptional\nTrue\nFalse\noptional\nFalse\noptional\nTrue\npython:list\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_aedt_model",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_aedt_model.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_aedt_model",
        "title": "export_aedt_model > export_aedt_model > export_aedt_model",
        "section": "export_aedt_model > export_aedt_model",
        "text": "ToolkitBackend.export_aedt_model(obj_list=None, export_path=None, export_as_single_objects=True, air_objects=False, encode=True)\n\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\n\nParameters\n\nobj_list\n\npython:list, optional\n\nList of objects to export. The default is None, in which case\nevery model object except 3D, vacuum, and air objects are exported.\n\nexport_path\n\npython:str, optional\n\nFull path of the exported OBJ file.\nThe default is None, in which case the file is exported in the working directory.\n\nexport_as_single_objects\n\nbool, optional\n\nWhether to export the model as a single object. The default is True.\nIf False, the model is exported as a list of objects for each object.\n\nair_objects\n\nbool, optional\n\nWhether to export air and vacuum objects. The default is False.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nReturns\n\npython:list or python:dict\n\nList of exported OBJ files or encoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property Elliptical.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "RectangularPatchEdge.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "RectangularPatchEdge.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property QuadRidged.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "BowTieRounded.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw H plane horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "HPlane.model_hfss()\n\nDraw H plane horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property QuadRidged.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "BowTieNormal.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property BowTieRounded.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw an axial mode antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "AxialMode.model_hfss()\n\nDraw an axial mode antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property Pyramidal.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property PyramidalRidged.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "PyramidalRidged.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "QuadRidged.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "RectangularPatchProbe.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "RectangularPatchProbe.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property BowTieSlot.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property AxialMode.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property RectangularPatchProbe.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.html#pyramidal",
        "title": "Pyramidal",
        "section": "Pyramidal",
        "text": "Manages a pyramidal horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nPyramidal horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nPyramidal.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nPyramidal.create_lattice_pair([...])\nCreate a lattice pair box.\nPyramidal.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nPyramidal.init_model()\nCreate a radiation boundary.\nPyramidal.model_disco()\nModel in PyDiscovery.\nPyramidal.model_hfss()\nDraw pyramidal horn antenna.\nPyramidal.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nPyramidal.setup_disco()\nSet up model in PyDiscovery.\nPyramidal.setup_hfss()\nSet up an antenna in HFSS.\nPyramidal.synthesis()\nAntenna synthesis.\nPyramidal.update_synthesis_parameters(new_params)\nUpdate the synthesis parameter from the antenna list.\nPyramidal.antenna_type\n\nPyramidal.coordinate_system\nReference coordinate system.\nPyramidal.frequency\nCenter frequency.\nPyramidal.frequency_unit\nFrequency units.\nPyramidal.length_unit\nLength unit.\nPyramidal.material\nHorn material.\nPyramidal.material_properties\nSubstrate material properties.\nPyramidal.name\nAntenna name.\nPyramidal.origin\nAntenna origin.\nPyramidal.outer_boundary\nOuter boundary.\nPyramidal\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.Pyramidal\nPyramidal.create_3dcomponent\nPyramidal.create_lattice_pair\nPyramidal.duplicate_along_line\nPyramidal.init_model\nPyramidal.model_disco\nPyramidal.model_hfss\nPyramidal.set_variables_in_hfss\nPyramidal.setup_disco\nPyramidal.setup_hfss\nPyramidal.synthesis\nPyramidal.update_synthesis_parameters\nPyramidal.antenna_type\nPyramidal.coordinate_system\nPyramidal.frequency\nPyramidal.frequency_unit\nPyramidal.length_unit\nPyramidal.material\nPyramidal.material_properties\nPyramidal.name\nPyramidal.origin\nPyramidal.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal",
        "title": "Pyramidal > Pyramidal > Pyramidal",
        "section": "Pyramidal > Pyramidal",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal(*args, **kwargs)\n\nManages a pyramidal horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.Pyramidal\n\nPyramidal horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Pyramidal\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = Pyramidal(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = Pyramidal(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nPyramidal.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nPyramidal.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nPyramidal.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nPyramidal.init_model()\n\nCreate a radiation boundary.\n\nPyramidal.model_disco()\n\nModel in PyDiscovery.\n\nPyramidal.model_hfss()\n\nDraw pyramidal horn antenna.\n\nPyramidal.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nPyramidal.setup_disco()\n\nSet up model in PyDiscovery.\n\nPyramidal.setup_hfss()\n\nSet up an antenna in HFSS.\n\nPyramidal.synthesis()\n\nAntenna synthesis.\n\nPyramidal.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nPyramidal.antenna_type\n\n\n\nPyramidal.coordinate_system\n\nReference coordinate system.\n\nPyramidal.frequency\n\nCenter frequency.\n\nPyramidal.frequency_unit\n\nFrequency units.\n\nPyramidal.length_unit\n\nLength unit.\n\nPyramidal.material\n\nHorn material.\n\nPyramidal.material_properties\n\nSubstrate material properties.\n\nPyramidal.name\n\nAntenna name.\n\nPyramidal.origin\n\nAntenna origin.\n\nPyramidal.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property RectangularPatchEdge.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#bowtie-antenna-synthesis",
        "title": "Bowtie antenna synthesis",
        "section": "Bowtie antenna synthesis",
        "text": "This example demonstrates how to synthesize a bowtie antenna using the BowTieRounded class. It initiates AEDT through PyAEDT, sets up an empty HFSS design, and proceeds to create the antenna.\nBowtie antenna synthesis\nBowTieRounded"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#perform-required-imports",
        "title": "Bowtie antenna synthesis > Perform required imports",
        "section": "Perform required imports",
        "text": "Import the antenna toolkit class and PyAEDT.\nPerform required imports"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#set-aedt-version",
        "title": "Bowtie antenna synthesis > Set AEDT version",
        "section": "Set AEDT version",
        "text": "Set AEDT version.\nSet AEDT version"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#set-non-graphical-mode",
        "title": "Bowtie antenna synthesis > Set non-graphical mode",
        "section": "Set non-graphical mode",
        "text": "Set non-graphical mode.\nSet non-graphical mode"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#create-temporary-directory",
        "title": "Bowtie antenna synthesis > Create temporary directory",
        "section": "Create temporary directory",
        "text": "Create temporary directory"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#create-antenna-object-only-for-synthesis",
        "title": "Bowtie antenna synthesis > Create antenna object only for synthesis",
        "section": "Create antenna object only for synthesis",
        "text": "Create antenna object.\nCreate antenna object only for synthesis"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#change-synthesis-frequency",
        "title": "Bowtie antenna synthesis > Change synthesis frequency",
        "section": "Change synthesis frequency",
        "text": "Modify resonance frequency and modify parameters.\nChange synthesis frequency"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#create-an-empty-hfss-design",
        "title": "Bowtie antenna synthesis > Create an empty HFSS design",
        "section": "Create an empty HFSS design",
        "text": "Create an empty HFSS design.\nCreate an empty HFSS design"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#create-antenna-in-hfss",
        "title": "Bowtie antenna synthesis > Create antenna in HFSS",
        "section": "Create antenna in HFSS",
        "text": "Create antenna object, change frequency synthesis, create antenna, and set up in HFSS.\nCreate antenna setup.\nChange default name.\nCreate antenna in HFSS"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#create-antenna-in-hfss",
        "title": "Bowtie antenna synthesis > Create antenna in HFSS",
        "section": "Create antenna in HFSS",
        "text": "Create antenna object, change origin parameter in the antenna definition, create antenna, and set up in HFSS.\nCreate antenna in HFSS"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#plot-hfss-model",
        "title": "Bowtie antenna synthesis > Plot HFSS model",
        "section": "Plot HFSS model",
        "text": "Plot geometry with PyVista.\nPlot HFSS model"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#release-aedt",
        "title": "Bowtie antenna synthesis > Release AEDT",
        "section": "Release AEDT",
        "text": "Release AEDT.\nRelease AEDT"
    },
    {
        "objectID": "examples/create_antenna_simple",
        "href": "examples/create_antenna_simple.html#clean-temporary-directory",
        "title": "Bowtie antenna synthesis > Clean temporary directory",
        "section": "Clean temporary directory",
        "text": "Clean temporary directory"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property BowTieNormal.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/bowtie",
        "href": "toolkit/models/bowtie.html#bowtie",
        "title": "Bowtie",
        "section": "Bowtie",
        "text": "This page list the classes available for bowtie antennas:\nBowTieNormal(*args, **kwargs)\nManages a bowtie antenna.\nBowTieRounded(*args, **kwargs)\nManages a bowtie rounded antenna.\nBowTieSlot(*args, **kwargs)\nManages a bowtie slot antenna.\nYou must use these methods from PyAEDT as shown in this example:\nBowtie\nBowTieNormal\nBowTieRounded\nBowTieSlot"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property HPlane.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#installation",
        "title": "Installation",
        "section": "Installation",
        "text": "Visit the Releases page and pull\ndown the latest installer.\nInstallation"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#for-developers",
        "title": "Installation > For developers",
        "section": "For developers",
        "text": "The AEDT Antenna Toolkit can be installed like any other open source package.\nYou can either install both the backend and user interface (UI) methods or install only the backend methods.\nTo install both the backend and UI methods, run this command:\nIf you only need the common API, install only the backend methods with this\ncommand:\nTo install the toolkit offline, you can use a wheelhouse.\nOn the Releases page, you can find the wheelhouses for\nspecific release in its asserts and download the wheelhouse.\nYou can then install the toolkit with this command:\nYou can also install the toolkit using the toolkit manager. For more information,\nsee the toolkit manager (TBD).\nFor developers"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "Archimedean.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.open_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.open_project.html#open_project",
        "title": "open_project",
        "section": "open_project",
        "text": "Open an AEDT project.\nFull path to the project.\nTrue when successful, False when failed.\nopen_project\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.open_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.open_project.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.open_project",
        "title": "open_project > open_project > open_project",
        "section": "open_project > open_project",
        "text": "ToolkitBackend.open_project(project_name=None)\n\nOpen an AEDT project.\n\nParameters\n\nproject_name\n\npython:str, optional\n\nFull path to the project.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.open_project(\"path/to/file\")\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property RectangularPatchEdge.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "RectangularPatchEdge.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "Conical.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property Elliptical.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property BowTieRounded.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "BowTieNormal.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property BowTieNormal.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Elliptical.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property PyramidalRidged.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property Corrugated.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw pyramidal horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "Pyramidal.model_hfss()\n\nDraw pyramidal horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a bowtie rounded antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "BowTieRounded.model_hfss()\n\nDraw a bowtie rounded antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "RectangularPatchProbe.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "BowTieSlot.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.microstrip_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.microstrip_calculator.html#microstrip_calculator",
        "title": "microstrip_calculator",
        "section": "microstrip_calculator",
        "text": "Use the micro strip line calculator to calculate line width and length.\nSubstrate height.\nSubstrate permittivity.\nImpedance. The default is 50.0.\nElectrical length in degrees. The default is 150.0.\nLine width and length.\nmicrostrip_calculator\npython:float\npython:float\npython:str\noptional\n50.0\npython:str\noptional\n150.0\npython:tuple"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.microstrip_calculator",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.microstrip_calculator.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.TransmissionLine.microstrip_calculator",
        "title": "microstrip_calculator > microstrip_calculator > microstrip_calculator",
        "section": "microstrip_calculator > microstrip_calculator",
        "text": "TransmissionLine.microstrip_calculator(substrate_height, permittivity, impedance=50.0, electrical_length=150.0)\n\nUse the micro strip line calculator to calculate line width and length.\n\nParameters\n\nsubstrate_height\n\npython:float\n\nSubstrate height.\n\npermittivity\n\npython:float\n\nSubstrate permittivity.\n\nimpedance\n\npython:str, optional\n\nImpedance. The default is 50.0.\n\nelectrical_length\n\npython:str, optional\n\nElectrical length in degrees. The default is 150.0.\n\nReturns\n\npython:tuple\n\nLine width and length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property RectangularPatchInset.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.gain",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.gain.html#gain",
        "title": "gain",
        "section": "gain",
        "text": "Helix expected gain.\ngain\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.gain",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.gain.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.gain",
        "title": "gain > gain > gain",
        "section": "gain > gain",
        "text": "property AxialMode.gain\n\nHelix expected gain.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "HPlane.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property RectangularPatchProbe.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "Conical.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "BowTieRounded.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property BowTieRounded.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "AxialMode.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property RectangularPatchEdge.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "Conical.model_hfss()\n\nDraw a conical horn antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "HPlane.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "RectangularPatchEdge.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property Conical.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "EPlane.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "AxialMode.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "BowTieRounded.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property Pyramidal.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property RectangularPatchInset.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property PyramidalRidged.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property Corrugated.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property PyramidalRidged.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "Corrugated.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "PyramidalRidged.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property EPlane.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "RectangularPatchInset.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "PyramidalRidged.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "RectangularPatchInset.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "BowTieNormal.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Conical.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "Elliptical.setup_disco()\n\nSet up in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "Corrugated.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property EPlane.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "Corrugated.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "BowTieSlot.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property Corrugated.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_properties.html#get_properties",
        "title": "get_properties",
        "section": "get_properties",
        "text": "Get the toolkit properties.\nDictionary containing the toolkit properties.\nget_properties\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_properties.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_properties",
        "title": "get_properties > get_properties > get_properties",
        "section": "get_properties > get_properties",
        "text": "ToolkitBackend.get_properties() -> Dict[str, str]\n\nGet the toolkit properties.\n\nReturns\n\npython:dict\n\nDictionary containing the toolkit properties.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_properties()\n{\"property1\": value1, \"property2\": value2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property QuadRidged.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/helix",
        "href": "toolkit/models/helix.html#helix",
        "title": "Helix",
        "section": "Helix",
        "text": "This pages lists the classes available for helix antennas:\nAxialMode(*args, **kwargs)\nManages an axial mode helix antenna.\nYou must use these methods from PyAEDT as shown in this example:\nHelix\nAxialMode"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "Conical.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property Pyramidal.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "Corrugated.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "AxialMode.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "Elliptical.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.get_waveguide_dimensions",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.get_waveguide_dimensions.html#get_waveguide_dimensions",
        "title": "get_waveguide_dimensions",
        "section": "get_waveguide_dimensions",
        "text": "Get waveguide dimensions.\nWaveguide name.\nDimension units. The default is mm.\nWaveguide dimensions.\nget_waveguide_dimensions\npython:str\npython:str\nmm\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.get_waveguide_dimensions",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.get_waveguide_dimensions.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.get_waveguide_dimensions",
        "title": "get_waveguide_dimensions > get_waveguide_dimensions > get_waveguide_dimensions",
        "section": "get_waveguide_dimensions > get_waveguide_dimensions",
        "text": "StandardWaveguide.get_waveguide_dimensions(name, units='mm')\n\nGet waveguide dimensions.\n\nParameters\n\nname\n\npython:str\n\nWaveguide name.\n\nunits\n\npython:str\n\nDimension units. The default is mm.\n\nReturns\n\npython:list\n\nWaveguide dimensions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EPlane.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property EPlane.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "BowTieNormal.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "BowTieSlot.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "AxialMode.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "Corrugated.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "PyramidalRidged.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "Corrugated.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "PyramidalRidged.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "Conical.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "Pyramidal.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.html#axialmode",
        "title": "AxialMode",
        "section": "AxialMode",
        "text": "Manages an axial mode helix antenna.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHelix material. If the material is not defined, a new material,\nparametrized, is defined. The default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna. The default is True.\nAntenna object.\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\nAxialMode.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nAxialMode.create_lattice_pair([...])\nCreate a lattice pair box.\nAxialMode.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nAxialMode.init_model()\nCreate a radiation boundary.\nAxialMode.model_disco()\nModel in PyDiscovery.\nAxialMode.model_hfss()\nDraw an axial mode antenna.\nAxialMode.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nAxialMode.setup_disco()\nSet up model in PyDiscovery.\nAxialMode.setup_hfss()\nSet up an antenna in HFSS.\nAxialMode.synthesis()\nAntenna synthesis.\nAxialMode.update_synthesis_parameters(new_params)\nUpdate the synthesis parameter from the antenna list.\nAxialMode.antenna_type\n\nAxialMode.coordinate_system\nReference coordinate system.\nAxialMode.direction\nHelix direction.\nAxialMode.feeder_length\nHelix feeder length.\nAxialMode.frequency\nCenter frequency.\nAxialMode.frequency_unit\nFrequency units.\nAxialMode.gain\nHelix expected gain.\nAxialMode.length_unit\nLength unit.\nAxialMode.material\nHelix material.\nAxialMode.name\nAntenna name.\nAxialMode.origin\nAntenna origin.\nAxialMode.outer_boundary\nOuter boundary.\nAxialMode\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.AxialMode\nAxialMode.create_3dcomponent\nAxialMode.create_lattice_pair\nAxialMode.duplicate_along_line\nAxialMode.init_model\nAxialMode.model_disco\nAxialMode.model_hfss\nAxialMode.set_variables_in_hfss\nAxialMode.setup_disco\nAxialMode.setup_hfss\nAxialMode.synthesis\nAxialMode.update_synthesis_parameters\nAxialMode.antenna_type\nAxialMode.coordinate_system\nAxialMode.direction\nAxialMode.feeder_length\nAxialMode.frequency\nAxialMode.frequency_unit\nAxialMode.gain\nAxialMode.length_unit\nAxialMode.material\nAxialMode.name\nAxialMode.origin\nAxialMode.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode",
        "title": "AxialMode > AxialMode > AxialMode",
        "section": "AxialMode > AxialMode",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode(*args, **kwargs)\n\nManages an axial mode helix antenna.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHelix material. If the material is not defined, a new material,\nparametrized, is defined. The default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.AxialMode\n\nAntenna object.\n\nNotes\n\n1\n\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.helix import AxialMode\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = AxialMode(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = AxialMode(app, origin=[200, 50, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nAxialMode.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nAxialMode.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nAxialMode.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nAxialMode.init_model()\n\nCreate a radiation boundary.\n\nAxialMode.model_disco()\n\nModel in PyDiscovery.\n\nAxialMode.model_hfss()\n\nDraw an axial mode antenna.\n\nAxialMode.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nAxialMode.setup_disco()\n\nSet up model in PyDiscovery.\n\nAxialMode.setup_hfss()\n\nSet up an antenna in HFSS.\n\nAxialMode.synthesis()\n\nAntenna synthesis.\n\nAxialMode.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nAxialMode.antenna_type\n\n\n\nAxialMode.coordinate_system\n\nReference coordinate system.\n\nAxialMode.direction\n\nHelix direction.\n\nAxialMode.feeder_length\n\nHelix feeder length.\n\nAxialMode.frequency\n\nCenter frequency.\n\nAxialMode.frequency_unit\n\nFrequency units.\n\nAxialMode.gain\n\nHelix expected gain.\n\nAxialMode.length_unit\n\nLength unit.\n\nAxialMode.material\n\nHelix material.\n\nAxialMode.name\n\nAntenna name.\n\nAxialMode.origin\n\nAntenna origin.\n\nAxialMode.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "RectangularPatchEdge.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "AxialMode.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property Elliptical.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "Archimedean.setup_disco()\n\nSet up in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "Pyramidal.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "Corrugated.setup_disco()\n\nSet up in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property RectangularPatchEdge.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property HPlane.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "Elliptical.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "BowTieSlot.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "Corrugated.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property BowTieNormal.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "BowTieSlot.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.waveguide_list",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.waveguide_list.html#waveguide_list",
        "title": "waveguide_list",
        "section": "waveguide_list",
        "text": "Standard waveguide list.\nwaveguide_list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.waveguide_list",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.waveguide_list.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.waveguide_list",
        "title": "waveguide_list > waveguide_list > waveguide_list",
        "section": "waveguide_list > waveguide_list",
        "text": "property StandardWaveguide.waveguide_list\n\nStandard waveguide list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.installed_aedt_version.html#installed_aedt_version",
        "title": "installed_aedt_version",
        "section": "installed_aedt_version",
        "text": "Get the installed AEDT versions.\nList of installed AEDT versions.\ninstalled_aedt_version\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.installed_aedt_version",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.installed_aedt_version.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.installed_aedt_version",
        "title": "installed_aedt_version > installed_aedt_version > installed_aedt_version",
        "section": "installed_aedt_version > installed_aedt_version",
        "text": "static ToolkitBackend.installed_aedt_version() -> List\n\nGet the installed AEDT versions.\n\nReturns\n\npython:list\n\nList of installed AEDT versions.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.installed_aedt_version()\n[\"2024.2\", \"2025.1\"]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.aedt_sessions.html#aedt_sessions",
        "title": "aedt_sessions",
        "section": "aedt_sessions",
        "text": "Get information for the active AEDT sessions.\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\naedt_sessions\npython:dict\n-1"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.aedt_sessions",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.aedt_sessions.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.aedt_sessions",
        "title": "aedt_sessions > aedt_sessions > aedt_sessions",
        "section": "aedt_sessions > aedt_sessions",
        "text": "ToolkitBackend.aedt_sessions() -> Dict[int, int]\n\nGet information for the active AEDT sessions.\n\nReturns\n\npython:dict\n\nDictionary of AEDT process IDs (PIDS) {AEDT PID: port}.\nIf the PID corresponds to a COM session, the port is set to -1.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.aedt_sessions()\n{pid1: grpc_port1, pid2: grpc_port2}\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property BowTieRounded.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.start_frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.start_frequency.html#start_frequency",
        "title": "start_frequency",
        "section": "start_frequency",
        "text": "Start frequency.\nstart_frequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.start_frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.start_frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.start_frequency",
        "title": "start_frequency > start_frequency > start_frequency",
        "section": "start_frequency > start_frequency",
        "text": "property Archimedean.start_frequency\n\nStart frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "EPlane.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "RectangularPatchEdge.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property BowTieNormal.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the project.\nRelease notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#071---may-08-2025",
        "title": "Release notes > 0.7.1 - May 08, 2025",
        "section": "0.7.1 - May 08, 2025",
        "text": "Upload artifacts\n#318\nFix release artifacts\n#323\nupdate CHANGELOG for v0.6.0\n#317\nFix release process\n#321\n0.7.1 - May 08, 2025"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#060---may-06-2025",
        "title": "Release notes > 0.6.0 - May 06, 2025",
        "section": "0.6.0 - May 06, 2025",
        "text": "Bump codecov/codecov-action from 4 to 5\n#315\nAdd Changelog\n#314\n0.6.0 - May 06, 2025"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property BowTieSlot.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property RectangularPatchEdge.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property Elliptical.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "PyramidalRidged.model_hfss()\n\nDraw conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "Conical.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "Elliptical.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property RectangularPatchInset.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property PyramidalRidged.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "Archimedean.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "QuadRidged.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "Archimedean.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property AxialMode.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property Archimedean.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.html#quadridged",
        "title": "QuadRidged",
        "section": "QuadRidged",
        "text": "Manages a quad-ridged horn antenna.\nThis class is accessible through the app hfss object [1], [2], [3].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nPyramidal ridged horn object.\nK. L. Walton and V. C. Sundberg, “Broadband ridged horn design,”\nMicrowave J., vol. 4, pp. 96-101, Apr. 1964.\nC. Bruns et al., “Analysis and Simulations of a 1-18 GHz\nBroadband Double-Ridged Horn Antenna,”\nIEEE Electromag. Compat., vol. 45, pp. 55-60, Feb 2003.\nC. Balanis, “Horn Antennas,” Antenna Theory Analysis,\n3rd ed. Hoboken: Wiley, 2005, ch. 13.\nQuadRidged.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nQuadRidged.create_lattice_pair([...])\nCreate a lattice pair box.\nQuadRidged.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nQuadRidged.init_model()\nCreate a radiation boundary.\nQuadRidged.model_disco()\nModel in PyDiscovery.\nQuadRidged.model_hfss()\nDraw conical horn antenna.\nQuadRidged.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nQuadRidged.setup_disco()\nSet up model in PyDiscovery.\nQuadRidged.setup_hfss()\nSet up an antenna in HFSS.\nQuadRidged.synthesis()\nAntenna synthesis.\nQuadRidged.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nQuadRidged.antenna_type\n\nQuadRidged.coordinate_system\nReference coordinate system.\nQuadRidged.frequency\nCenter frequency.\nQuadRidged.frequency_unit\nFrequency units.\nQuadRidged.length_unit\nLength unit.\nQuadRidged.material\nHorn material.\nQuadRidged.material_properties\nSubstrate material properties.\nQuadRidged.name\nAntenna name.\nQuadRidged.origin\nAntenna origin.\nQuadRidged.outer_boundary\nOuter boundary.\nQuadRidged\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.PyramidalRidged\nQuadRidged.create_3dcomponent\nQuadRidged.create_lattice_pair\nQuadRidged.duplicate_along_line\nQuadRidged.init_model\nQuadRidged.model_disco\nQuadRidged.model_hfss\nQuadRidged.set_variables_in_hfss\nQuadRidged.setup_disco\nQuadRidged.setup_hfss\nQuadRidged.synthesis\nQuadRidged.update_synthesis_parameters\nQuadRidged.antenna_type\nQuadRidged.coordinate_system\nQuadRidged.frequency\nQuadRidged.frequency_unit\nQuadRidged.length_unit\nQuadRidged.material\nQuadRidged.material_properties\nQuadRidged.name\nQuadRidged.origin\nQuadRidged.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged",
        "title": "QuadRidged > QuadRidged > QuadRidged",
        "section": "QuadRidged > QuadRidged",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged(*args, **kwargs)\n\nManages a quad-ridged horn antenna.\n\nThis class is accessible through the app hfss object [1], [2], [3].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.PyramidalRidged\n\nPyramidal ridged horn object.\n\nNotes\n\n1\n\nK. L. Walton and V. C. Sundberg, “Broadband ridged horn design,”\nMicrowave J., vol. 4, pp. 96-101, Apr. 1964.\n\n2\n\nC. Bruns et al., “Analysis and Simulations of a 1-18 GHz\nBroadband Double-Ridged Horn Antenna,”\nIEEE Electromag. Compat., vol. 45, pp. 55-60, Feb 2003.\n\n3\n\nC. Balanis, “Horn Antennas,” Antenna Theory Analysis,\n3rd ed. Hoboken: Wiley, 2005, ch. 13.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import QuadRidged\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = QuadRidged(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = QuadRidged(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nQuadRidged.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nQuadRidged.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nQuadRidged.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nQuadRidged.init_model()\n\nCreate a radiation boundary.\n\nQuadRidged.model_disco()\n\nModel in PyDiscovery.\n\nQuadRidged.model_hfss()\n\nDraw conical horn antenna.\n\nQuadRidged.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nQuadRidged.setup_disco()\n\nSet up model in PyDiscovery.\n\nQuadRidged.setup_hfss()\n\nSet up an antenna in HFSS.\n\nQuadRidged.synthesis()\n\nAntenna synthesis.\n\nQuadRidged.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nQuadRidged.antenna_type\n\n\n\nQuadRidged.coordinate_system\n\nReference coordinate system.\n\nQuadRidged.frequency\n\nCenter frequency.\n\nQuadRidged.frequency_unit\n\nFrequency units.\n\nQuadRidged.length_unit\n\nLength unit.\n\nQuadRidged.material\n\nHorn material.\n\nQuadRidged.material_properties\n\nSubstrate material properties.\n\nQuadRidged.name\n\nAntenna name.\n\nQuadRidged.origin\n\nAntenna origin.\n\nQuadRidged.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property BowTieNormal.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_farfield",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_farfield.html#export_farfield",
        "title": "export_farfield",
        "section": "export_farfield",
        "text": "Export far field data and then encode the file if the encode parameter is enabled.\nFrequency value or list of frequencies to compute far field data. The default is None, in which case\nall available frequencies are computed.\nName of the setup to use. The default is None, in which case nominal_adaptive is used.\nInfinite sphere to use. The default is None, in which case an existing sphere is used or a new\none is created.\nVariation dictionary.\nWhether to encode the file. The default is True.\nList of eep files or encoded data.\nexport_farfield\nencode\npython:float\npython:list\nNone,\npython:str\noptional\nNone,\nnominal_adaptive\npython:str\noptional\nNone\npython:dict\noptional\noptional\nTrue\npython:list\npython:dict"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_farfield",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_farfield.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.export_farfield",
        "title": "export_farfield > export_farfield > export_farfield",
        "section": "export_farfield > export_farfield",
        "text": "ToolkitBackend.export_farfield(frequencies=None, setup=None, sphere=None, variations=None, encode=True)\n\nExport far field data and then encode the file if the encode parameter is enabled.\n\nParameters\n\nfrequencies\n\npython:float, python:list\n\nFrequency value or list of frequencies to compute far field data. The default is None, in which case\nall available frequencies are computed.\n\nsetup\n\npython:str, optional\n\nName of the setup to use. The default is None, in which case nominal_adaptive is used.\n\nsphere\n\npython:str, optional\n\nInfinite sphere to use. The default is None, in which case an existing sphere is used or a new\none is created.\n\nvariations\n\npython:dict, optional\n\nVariation dictionary.\n\nencode\n\nbool, optional\n\nWhether to encode the file. The default is True.\n\nReturns\n\npython:list or python:dict\n\nList of eep files or encoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.stop_frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.stop_frequency.html#stop_frequency",
        "title": "stop_frequency",
        "section": "stop_frequency",
        "text": "Stop frequency.\nstop_frequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.stop_frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.stop_frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.stop_frequency",
        "title": "stop_frequency > stop_frequency > stop_frequency",
        "section": "stop_frequency > stop_frequency",
        "text": "property Archimedean.stop_frequency\n\nStop frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "QuadRidged.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.set_properties.html#set_properties",
        "title": "set_properties",
        "section": "set_properties",
        "text": "Assign the passed data to the internal data model.\nDictionary containing the properties to update.\nTuple indicating the success status and a message.\nset_properties\npython:dict\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.set_properties",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.set_properties.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.set_properties",
        "title": "set_properties > set_properties > set_properties",
        "section": "set_properties > set_properties",
        "text": "ToolkitBackend.set_properties(data: Dict[str, Any])\n\nAssign the passed data to the internal data model.\n\nParameters\n\ndata\n\npython:dict\n\nDictionary containing the properties to update.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the success status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> value2 = 2\n>>> toolkit_api.set_properties({\"property1\": \"value1\", \"property2\": value2})\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property BowTieRounded.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property BowTieSlot.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property RectangularPatchEdge.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.html#rectangularpatchprobe",
        "title": "RectangularPatchProbe",
        "section": "RectangularPatchProbe",
        "text": "Manages a rectangular patch antenna with a coaxial probe.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material.\nIf the material is not defined, a new material, parametrized, is created.\nThe default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 1.575.\nWhether to create a parametrized antenna. The default is True.\nPatch antenna object.\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\nRectangularPatchProbe.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nRectangularPatchProbe.create_lattice_pair([...])\nCreate a lattice pair box.\nRectangularPatchProbe.duplicate_along_line(vector)\nDuplicate the object along a line.\nRectangularPatchProbe.init_model()\nCreate a radiation boundary.\nRectangularPatchProbe.model_disco()\nModel in PyDiscovery.\nRectangularPatchProbe.model_hfss()\nDraw rectangular patch antenna with coaxial probe.\nRectangularPatchProbe.set_variables_in_hfss([...])\nCreate HFSS design variables.\nRectangularPatchProbe.setup_disco()\nSet up the model in PyDiscovery.\nRectangularPatchProbe.setup_hfss()\nSet up an antenna in HFSS.\nRectangularPatchProbe.synthesis()\nAntenna synthesis.\nRectangularPatchProbe.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nRectangularPatchProbe.antenna_type\n\nRectangularPatchProbe.coordinate_system\nReference coordinate system.\nRectangularPatchProbe.frequency\nCenter frequency.\nRectangularPatchProbe.frequency_unit\nFrequency units.\nRectangularPatchProbe.length_unit\nLength unit.\nRectangularPatchProbe.material\nSubstrate material.\nRectangularPatchProbe.material_properties\nSubstrate material properties.\nRectangularPatchProbe.name\nAntenna name.\nRectangularPatchProbe.origin\nAntenna origin.\nRectangularPatchProbe.outer_boundary\nOuter boundary.\nRectangularPatchProbe.substrate_height\nSubstrate height.\nRectangularPatchProbe\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n1.575\noptional\nTrue\naedt.toolkits.antenna.RectangularPatchProbe\nRectangularPatchProbe.create_3dcomponent\nRectangularPatchProbe.create_lattice_pair\nRectangularPatchProbe.duplicate_along_line\nRectangularPatchProbe.init_model\nRectangularPatchProbe.model_disco\nRectangularPatchProbe.model_hfss\nRectangularPatchProbe.set_variables_in_hfss\nRectangularPatchProbe.setup_disco\nRectangularPatchProbe.setup_hfss\nRectangularPatchProbe.synthesis\nRectangularPatchProbe.update_synthesis_parameters\nRectangularPatchProbe.antenna_type\nRectangularPatchProbe.coordinate_system\nRectangularPatchProbe.frequency\nRectangularPatchProbe.frequency_unit\nRectangularPatchProbe.length_unit\nRectangularPatchProbe.material\nRectangularPatchProbe.material_properties\nRectangularPatchProbe.name\nRectangularPatchProbe.origin\nRectangularPatchProbe.outer_boundary\nRectangularPatchProbe.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe",
        "title": "RectangularPatchProbe > RectangularPatchProbe > RectangularPatchProbe",
        "section": "RectangularPatchProbe > RectangularPatchProbe",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe(*args, **kwargs)\n\nManages a rectangular patch antenna with a coaxial probe.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material.\nIf the material is not defined, a new material, parametrized, is created.\nThe default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 1.575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.RectangularPatchProbe\n\nPatch antenna object.\n\nNotes\n\n1\n\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.patch import RectangularPatchProbe\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = RectangularPatchProbe(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRectangularPatchProbe.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nRectangularPatchProbe.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nRectangularPatchProbe.duplicate_along_line(vector)\n\nDuplicate the object along a line.\n\nRectangularPatchProbe.init_model()\n\nCreate a radiation boundary.\n\nRectangularPatchProbe.model_disco()\n\nModel in PyDiscovery.\n\nRectangularPatchProbe.model_hfss()\n\nDraw rectangular patch antenna with coaxial probe.\n\nRectangularPatchProbe.set_variables_in_hfss([...])\n\nCreate HFSS design variables.\n\nRectangularPatchProbe.setup_disco()\n\nSet up the model in PyDiscovery.\n\nRectangularPatchProbe.setup_hfss()\n\nSet up an antenna in HFSS.\n\nRectangularPatchProbe.synthesis()\n\nAntenna synthesis.\n\nRectangularPatchProbe.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nRectangularPatchProbe.antenna_type\n\n\n\nRectangularPatchProbe.coordinate_system\n\nReference coordinate system.\n\nRectangularPatchProbe.frequency\n\nCenter frequency.\n\nRectangularPatchProbe.frequency_unit\n\nFrequency units.\n\nRectangularPatchProbe.length_unit\n\nLength unit.\n\nRectangularPatchProbe.material\n\nSubstrate material.\n\nRectangularPatchProbe.material_properties\n\nSubstrate material properties.\n\nRectangularPatchProbe.name\n\nAntenna name.\n\nRectangularPatchProbe.origin\n\nAntenna origin.\n\nRectangularPatchProbe.outer_boundary\n\nOuter boundary.\n\nRectangularPatchProbe.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw rectangular patch antenna with coaxial probe.\nOnce the antenna is created, this method will not be used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "RectangularPatchProbe.model_hfss()\n\nDraw rectangular patch antenna with coaxial probe.\nOnce the antenna is created, this method will not be used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property BowTieSlot.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property RectangularPatchProbe.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "Conical.setup_disco()\n\nSet up in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.html#conical",
        "title": "Conical",
        "section": "Conical",
        "text": "Manages a conical horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nConical horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nConical.create_3dcomponent([component_file, ...])\nCreate a 3D component of the antenna.\nConical.create_lattice_pair([...])\nCreate a lattice pair box.\nConical.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nConical.init_model()\nCreate a radiation boundary.\nConical.model_disco()\nModel in PyDiscovery.\nConical.model_hfss()\nDraw a conical horn antenna.\nConical.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nConical.setup_disco()\nSet up in PyDiscovery.\nConical.setup_hfss()\nSet up an antenna in HFSS.\nConical.synthesis()\nAntenna synthesis.\nConical.update_synthesis_parameters(new_params)\nUpdate the synthesis parameter from the antenna list.\nConical.antenna_type\n\nConical.coordinate_system\nReference coordinate system.\nConical.frequency\nCenter frequency.\nConical.frequency_unit\nFrequency units.\nConical.length_unit\nLength unit.\nConical.material\nHorn material.\nConical.material_properties\nSubstrate material properties.\nConical.name\nAntenna name.\nConical.origin\nAntenna origin.\nConical.outer_boundary\nOuter boundary.\nConical\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.ConicalHorn\nConical.create_3dcomponent\nConical.create_lattice_pair\nConical.duplicate_along_line\nConical.init_model\nConical.model_disco\nConical.model_hfss\nConical.set_variables_in_hfss\nConical.setup_disco\nConical.setup_hfss\nConical.synthesis\nConical.update_synthesis_parameters\nConical.antenna_type\nConical.coordinate_system\nConical.frequency\nConical.frequency_unit\nConical.length_unit\nConical.material\nConical.material_properties\nConical.name\nConical.origin\nConical.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical",
        "title": "Conical > Conical > Conical",
        "section": "Conical > Conical",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical(*args, **kwargs)\n\nManages a conical horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.ConicalHorn\n\nConical horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> import ansys.aedt.core\n>>> oantenna1 = Conical(None)\n>>> oantenna1.frequency = 12.0\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = Conical(app)\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = Conical(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nConical.create_3dcomponent([component_file, ...])\n\nCreate a 3D component of the antenna.\n\nConical.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nConical.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nConical.init_model()\n\nCreate a radiation boundary.\n\nConical.model_disco()\n\nModel in PyDiscovery.\n\nConical.model_hfss()\n\nDraw a conical horn antenna.\n\nConical.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nConical.setup_disco()\n\nSet up in PyDiscovery.\n\nConical.setup_hfss()\n\nSet up an antenna in HFSS.\n\nConical.synthesis()\n\nAntenna synthesis.\n\nConical.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nConical.antenna_type\n\n\n\nConical.coordinate_system\n\nReference coordinate system.\n\nConical.frequency\n\nCenter frequency.\n\nConical.frequency_unit\n\nFrequency units.\n\nConical.length_unit\n\nLength unit.\n\nConical.material\n\nHorn material.\n\nConical.material_properties\n\nSubstrate material properties.\n\nConical.name\n\nAntenna name.\n\nConical.origin\n\nAntenna origin.\n\nConical.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This section explains how to install the AEDT Antenna Toolkit.\nLearn how to install the AEDT Antenna Toolkit.\nLearn more about the Antenna wizard and how to use it.\nGetting started"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property RectangularPatchProbe.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#antenna-toolkit-documentation-071",
        "title": "Antenna toolkit documentation 0.7.1",
        "section": "Antenna toolkit documentation 0.7.1",
        "text": "Useful links:\nInstallation |\nSource repository |\nIssues\nThe AEDT Antenna Toolkit is a Python interface for accelerating antenna design\nusing Ansys Electronics Desktop\n(AEDT). You can launch this toolkit from AEDT or launch it directly\nfrom a Python console.\nLearn more about the AEDT Antenna Toolkit and how to install it.\nUnderstand how to use the Antenna toolkit wizard.\nUnderstand the APIs available for the AEDT Antenna Toolkit.\nExplore examples that show how to use the API.\nLearn how to contribute to the AEDT Antenna Toolkit codebase or documentation.\nAntenna toolkit documentation 0.7.1"
    },
    {
        "objectID": "index",
        "href": "index.html#indices-and-tables",
        "title": "Antenna toolkit documentation 0.7.1 > Indices and tables",
        "section": "Indices and tables",
        "text": "genindex\nsearch\nIndices and tables"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Helix material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property AxialMode.material\n\nHelix material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "RectangularPatchProbe.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/index",
        "href": "toolkit/models/index.html#antenna-api",
        "title": "Antenna API",
        "section": "Antenna API",
        "text": "The Antenna API contains classes for all antenna types available in the toolkit:\nYou use the Antenna API at the model level from PyAEDT.\nYou can create one or more antennas. An antenna is object-oriented. You can synthesis an\nantenna without AEDT.\nThis code shows how to synthesis an antenna:\nThis code shows how to synthesize and create a model of an antenna in HFSS:\nAntenna API"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property BowTieRounded.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "BowTieSlot.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property AxialMode.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "RectangularPatchEdge.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "BowTieNormal.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "Corrugated.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property EPlane.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.html#eplane",
        "title": "EPlane",
        "section": "EPlane",
        "text": "Manages an E plane horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nE plane horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nEPlane.create_3dcomponent([component_file, ...])\nCreate a 3D component of the antenna.\nEPlane.create_lattice_pair([lattice_height, ...])\nCreate a lattice pair box.\nEPlane.duplicate_along_line(vector[, num_clones])\nDuplicate the object along a line.\nEPlane.init_model()\nCreate a radiation boundary.\nEPlane.model_disco()\nModel in PyDiscovery.\nEPlane.model_hfss()\nDraw E plane horn antenna.\nEPlane.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nEPlane.setup_disco()\nSet up model in PyDiscovery.\nEPlane.setup_hfss()\nSet up an antenna in HFSS.\nEPlane.synthesis()\nAntenna synthesis.\nEPlane.update_synthesis_parameters(new_params)\nUpdate the synthesis parameter from the antenna list.\nEPlane.antenna_type\n\nEPlane.coordinate_system\nReference coordinate system.\nEPlane.frequency\nCenter frequency.\nEPlane.frequency_unit\nFrequency units.\nEPlane.length_unit\nLength unit.\nEPlane.material\nHorn material.\nEPlane.material_properties\nSubstrate material properties.\nEPlane.name\nAntenna name.\nEPlane.origin\nAntenna origin.\nEPlane.outer_boundary\nOuter boundary.\nEPlane\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.EPlaneHorn\nEPlane.create_3dcomponent\nEPlane.create_lattice_pair\nEPlane.duplicate_along_line\nEPlane.init_model\nEPlane.model_disco\nEPlane.model_hfss\nEPlane.set_variables_in_hfss\nEPlane.setup_disco\nEPlane.setup_hfss\nEPlane.synthesis\nEPlane.update_synthesis_parameters\nEPlane.antenna_type\nEPlane.coordinate_system\nEPlane.frequency\nEPlane.frequency_unit\nEPlane.length_unit\nEPlane.material\nEPlane.material_properties\nEPlane.name\nEPlane.origin\nEPlane.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane",
        "title": "EPlane > EPlane > EPlane",
        "section": "EPlane > EPlane",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane(*args, **kwargs)\n\nManages an E plane horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.EPlaneHorn\n\nE plane horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import EPlane\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = EPlane(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = EPlane(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEPlane.create_3dcomponent([component_file, ...])\n\nCreate a 3D component of the antenna.\n\nEPlane.create_lattice_pair([lattice_height, ...])\n\nCreate a lattice pair box.\n\nEPlane.duplicate_along_line(vector[, num_clones])\n\nDuplicate the object along a line.\n\nEPlane.init_model()\n\nCreate a radiation boundary.\n\nEPlane.model_disco()\n\nModel in PyDiscovery.\n\nEPlane.model_hfss()\n\nDraw E plane horn antenna.\n\nEPlane.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nEPlane.setup_disco()\n\nSet up model in PyDiscovery.\n\nEPlane.setup_hfss()\n\nSet up an antenna in HFSS.\n\nEPlane.synthesis()\n\nAntenna synthesis.\n\nEPlane.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEPlane.antenna_type\n\n\n\nEPlane.coordinate_system\n\nReference coordinate system.\n\nEPlane.frequency\n\nCenter frequency.\n\nEPlane.frequency_unit\n\nFrequency units.\n\nEPlane.length_unit\n\nLength unit.\n\nEPlane.material\n\nHorn material.\n\nEPlane.material_properties\n\nSubstrate material properties.\n\nEPlane.name\n\nAntenna name.\n\nEPlane.origin\n\nAntenna origin.\n\nEPlane.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "BowTieRounded.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.scattering_results",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.scattering_results.html#scattering_results",
        "title": "scattering_results",
        "section": "scattering_results",
        "text": "Get antenna scattering results.\nTrue when successful, False when failed.\nscattering_results\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.scattering_results",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.scattering_results.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.scattering_results",
        "title": "scattering_results > scattering_results > scattering_results",
        "section": "scattering_results > scattering_results",
        "text": "ToolkitBackend.scattering_results()\n\nGet antenna scattering results.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property Archimedean.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "QuadRidged.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a conical archimidean spiral antenna.\nThis method uses the user-defined model from the AEDT installation.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "Archimedean.model_hfss()\n\nDraw a conical archimidean spiral antenna.\n\nThis method uses the user-defined model from the AEDT installation.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "Pyramidal.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property HPlane.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "BowTieSlot.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "PyramidalRidged.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "Archimedean.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "BowTieRounded.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "BowTieSlot.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property BowTieNormal.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "RectangularPatchInset.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property PyramidalRidged.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_thread_status.html#get_thread_status",
        "title": "get_thread_status",
        "section": "get_thread_status",
        "text": "Get the toolkit thread status.\nTrue when active, False when inactive.\nget_thread_status\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_thread_status",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_thread_status.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_thread_status",
        "title": "get_thread_status > get_thread_status > get_thread_status",
        "section": "get_thread_status > get_thread_status",
        "text": "ToolkitBackend.get_thread_status() -> ToolkitThreadStatus\n\nGet the toolkit thread status.\n\nReturns\n\nbool\n\nTrue when active, False when inactive.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import Common\n>>> toolkit_api = Common()\n>>> toolkit_api.get_thread_status()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#antenna-toolkit-example",
        "title": "Antenna toolkit example",
        "section": "Antenna toolkit example",
        "text": "This example demonstrates how to use the ToolkitBackend class. It initiates AEDT through PyAEDT, sets up an empty HFSS design, and proceeds to create the antenna.\nAntenna toolkit example\nToolkitBackend"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#perform-required-imports",
        "title": "Antenna toolkit example > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform required imports"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#set-aedt-version",
        "title": "Antenna toolkit example > Set AEDT version",
        "section": "Set AEDT version",
        "text": "Set AEDT version.\nSet AEDT version"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#set-non-graphical-mode",
        "title": "Antenna toolkit example > Set non-graphical mode",
        "section": "Set non-graphical mode",
        "text": "Set non-graphical mode.\nSet non-graphical mode"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#create-temporary-directory",
        "title": "Antenna toolkit example > Create temporary directory",
        "section": "Create temporary directory",
        "text": "Create temporary directory"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#set-default-properties",
        "title": "Antenna toolkit example > Set default properties",
        "section": "Set default properties",
        "text": "Set default properties"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#initialize-toolkit",
        "title": "Antenna toolkit example > Initialize toolkit",
        "section": "Initialize toolkit",
        "text": "Initialize the toolkit.\nInitialize toolkit"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#get-available_antennas",
        "title": "Antenna toolkit example > Get available_antennas",
        "section": "Get available_antennas",
        "text": "Get available_antennas"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#get-default-properties",
        "title": "Antenna toolkit example > Get default properties",
        "section": "Get default properties",
        "text": "Get default properties"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#modify-default-length-units",
        "title": "Antenna toolkit example > Modify default length units",
        "section": "Modify default length units",
        "text": "Modify default length units"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#create-antenna-object-only-for-synthesis",
        "title": "Antenna toolkit example > Create antenna object only for synthesis",
        "section": "Create antenna object only for synthesis",
        "text": "Create antenna object.\nCreate antenna object only for synthesis"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#change-synthesis-frequency",
        "title": "Antenna toolkit example > Change synthesis frequency",
        "section": "Change synthesis frequency",
        "text": "Modify resonance frequency and modify parameters with the set_properties() method.\nChange synthesis frequency\nset_properties()"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#change-synthesis-frequency",
        "title": "Antenna toolkit example > Change synthesis frequency",
        "section": "Change synthesis frequency",
        "text": "Modify resonance frequency with properties directly.\nChange synthesis frequency"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#initialize-aedt",
        "title": "Antenna toolkit example > Initialize AEDT",
        "section": "Initialize AEDT",
        "text": "Launch a new AEDT session in a thread.\nInitialize AEDT"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#wait-for-the-toolkit-thread-to-be-idle",
        "title": "Antenna toolkit example > Wait for the toolkit thread to be idle",
        "section": "Wait for the toolkit thread to be idle",
        "text": "Wait for the toolkit thread to be idle and ready to accept a new task.\nWait for the toolkit thread to be idle"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#connect-to-hfss-design",
        "title": "Antenna toolkit example > Connect to HFSS design",
        "section": "Connect to HFSS design",
        "text": "Create an HFSS design.\nConnect to HFSS design"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#create-setup-when-antenna-is-created",
        "title": "Antenna toolkit example > Create setup when antenna is created",
        "section": "Create setup when antenna is created",
        "text": "Set create_setup property.\nCreate setup when antenna is created\ncreate_setup"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#create-antenna-in-hfss",
        "title": "Antenna toolkit example > Create antenna in HFSS",
        "section": "Create antenna in HFSS",
        "text": "Create antenna and set up in HFSS.\nCreate antenna in HFSS"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#try-to-create-antenna",
        "title": "Antenna toolkit example > Try. to create antenna",
        "section": "Try. to create antenna",
        "text": "The AEDT Antenna Toolkit API does not allow the creation of more than one antenna. However, you can use the antenna model’s API to create more than one antenna.\nTry. to create antenna"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#set-properties",
        "title": "Antenna toolkit example > Set properties",
        "section": "Set properties",
        "text": "Move antenna X position\nSet properties"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#fit-all",
        "title": "Antenna toolkit example > Fit all",
        "section": "Fit all",
        "text": "Fit all"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#set-properties",
        "title": "Antenna toolkit example > Set properties",
        "section": "Set properties",
        "text": "Move antenna X position to origin\nSet properties"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#analyze-design-in-batch-mode",
        "title": "Antenna toolkit example > Analyze design in batch mode",
        "section": "Analyze design in batch mode",
        "text": "Analyze design in batch mode"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#get-scattering-results",
        "title": "Antenna toolkit example > Get scattering results",
        "section": "Get scattering results",
        "text": "Get scattering results"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#get-farfield-results",
        "title": "Antenna toolkit example > Get farfield results",
        "section": "Get farfield results",
        "text": "Get farfield results"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#get-antenna-model",
        "title": "Antenna toolkit example > Get antenna model",
        "section": "Get antenna model",
        "text": "Get antenna model"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#release-aedt",
        "title": "Antenna toolkit example > Release AEDT",
        "section": "Release AEDT",
        "text": "Release AEDT.\nRelease AEDT"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#plot-results",
        "title": "Antenna toolkit example > Plot results",
        "section": "Plot results",
        "text": "Plot exported files\nPlot results"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#load-far-field",
        "title": "Antenna toolkit example > Load far field",
        "section": "Load far field",
        "text": "Load far field"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#plot-far-field",
        "title": "Antenna toolkit example > Plot far field",
        "section": "Plot far field",
        "text": "Plot far field"
    },
    {
        "objectID": "examples/antenna_toolkit_example",
        "href": "examples/antenna_toolkit_example.html#clean-temporary-directory",
        "title": "Antenna toolkit example > Clean temporary directory",
        "section": "Clean temporary directory",
        "text": "Clean temporary directory"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Archimedean.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw E plane horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "EPlane.model_hfss()\n\nDraw E plane horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "Pyramidal.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.html#bowtierounded",
        "title": "BowTieRounded",
        "section": "BowTieRounded",
        "text": "Manages a bowtie rounded antenna.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined.\nThe default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 1.575.\nWhether to create a parametrized antenna. The default is True.\nPatch antenna object.\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\nBowTieRounded.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nBowTieRounded.create_lattice_pair([...])\nCreate a lattice pair box.\nBowTieRounded.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nBowTieRounded.init_model()\nCreate a radiation boundary.\nBowTieRounded.model_disco()\nModel in PyDiscovery.\nBowTieRounded.model_hfss()\nDraw a bowtie rounded antenna.\nBowTieRounded.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nBowTieRounded.setup_disco()\nSet up the model in PyDiscovery.\nBowTieRounded.setup_hfss()\nSet up an antenna in HFSS.\nBowTieRounded.synthesis()\nAntenna synthesis.\nBowTieRounded.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nBowTieRounded.antenna_type\n\nBowTieRounded.coordinate_system\nReference coordinate system.\nBowTieRounded.frequency\nCenter frequency.\nBowTieRounded.frequency_unit\nFrequency units.\nBowTieRounded.length_unit\nLength unit.\nBowTieRounded.material\nSubstrate material.\nBowTieRounded.material_properties\nSubstrate material properties.\nBowTieRounded.name\nAntenna name.\nBowTieRounded.origin\nAntenna origin.\nBowTieRounded.outer_boundary\nOuter boundary.\nBowTieRounded.substrate_height\nSubstrate height.\nBowTieRounded\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n1.575\noptional\nTrue\naedt.toolkits.antenna.BowTieRounded\nBowTieRounded.create_3dcomponent\nBowTieRounded.create_lattice_pair\nBowTieRounded.duplicate_along_line\nBowTieRounded.init_model\nBowTieRounded.model_disco\nBowTieRounded.model_hfss\nBowTieRounded.set_variables_in_hfss\nBowTieRounded.setup_disco\nBowTieRounded.setup_hfss\nBowTieRounded.synthesis\nBowTieRounded.update_synthesis_parameters\nBowTieRounded.antenna_type\nBowTieRounded.coordinate_system\nBowTieRounded.frequency\nBowTieRounded.frequency_unit\nBowTieRounded.length_unit\nBowTieRounded.material\nBowTieRounded.material_properties\nBowTieRounded.name\nBowTieRounded.origin\nBowTieRounded.outer_boundary\nBowTieRounded.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded",
        "title": "BowTieRounded > BowTieRounded > BowTieRounded",
        "section": "BowTieRounded > BowTieRounded",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded(*args, **kwargs)\n\nManages a bowtie rounded antenna.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined.\nThe default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 1.575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.BowTieRounded\n\nPatch antenna object.\n\nNotes\n\n1\n\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie import BowTieRounded\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = BowTieRounded(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = BowTieRounded(app, origin=[200, 50, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nBowTieRounded.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nBowTieRounded.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nBowTieRounded.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nBowTieRounded.init_model()\n\nCreate a radiation boundary.\n\nBowTieRounded.model_disco()\n\nModel in PyDiscovery.\n\nBowTieRounded.model_hfss()\n\nDraw a bowtie rounded antenna.\n\nBowTieRounded.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nBowTieRounded.setup_disco()\n\nSet up the model in PyDiscovery.\n\nBowTieRounded.setup_hfss()\n\nSet up an antenna in HFSS.\n\nBowTieRounded.synthesis()\n\nAntenna synthesis.\n\nBowTieRounded.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nBowTieRounded.antenna_type\n\n\n\nBowTieRounded.coordinate_system\n\nReference coordinate system.\n\nBowTieRounded.frequency\n\nCenter frequency.\n\nBowTieRounded.frequency_unit\n\nFrequency units.\n\nBowTieRounded.length_unit\n\nLength unit.\n\nBowTieRounded.material\n\nSubstrate material.\n\nBowTieRounded.material_properties\n\nSubstrate material properties.\n\nBowTieRounded.name\n\nAntenna name.\n\nBowTieRounded.origin\n\nAntenna origin.\n\nBowTieRounded.outer_boundary\n\nOuter boundary.\n\nBowTieRounded.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "BowTieNormal.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property RectangularPatchProbe.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "RectangularPatchProbe.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "BowTieSlot.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a rectangular patch antenna inset fed.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "RectangularPatchInset.model_hfss()\n\nDraw a rectangular patch antenna inset fed.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property BowTieRounded.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_aedt.html#connect_aedt",
        "title": "connect_aedt",
        "section": "connect_aedt",
        "text": "Connect to an existing AEDT session.\nTrue when successful, False when failed.\nconnect_aedt\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_aedt.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_aedt",
        "title": "connect_aedt > connect_aedt > connect_aedt",
        "section": "connect_aedt > connect_aedt",
        "text": "ToolkitBackend.connect_aedt() -> bool\n\nConnect to an existing AEDT session.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_design_names",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_design_names.html#get_design_names",
        "title": "get_design_names",
        "section": "get_design_names",
        "text": "Get the design names for a specific project.\nThe first design name returned is the active design.\nList of design names.\nget_design_names\npython:list"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_design_names",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_design_names.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_design_names",
        "title": "get_design_names > get_design_names > get_design_names",
        "section": "get_design_names > get_design_names",
        "text": "ToolkitBackend.get_design_names() -> List[str]\n\nGet the design names for a specific project.\n\nThe first design name returned is the active design.\n\nReturns\n\npython:list\n\nList of design names.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.get_design_names()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property RectangularPatchInset.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Archimedean.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Central frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property Archimedean.frequency\n\nCentral frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "BowTieRounded.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "BowTieRounded.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "BowTieNormal.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "HPlane.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "EPlane.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property Corrugated.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Corrugated.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property Conical.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "PyramidalRidged.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/ui",
        "href": "toolkit/ui.html#antenna-wizard",
        "title": "Antenna wizard",
        "section": "Antenna wizard",
        "text": "This section describes how to use the Antenna wizard. It assumes that you have already launched the\nwizard from either the AEDT menu or AEDT console. For toolkit installation and wizard\nlaunching information, see these topics:\ninstall-toolkit-AEDT\ninstall_toolkit_console_ui\nOn the Settings tab, specify settings for either creating an AEDT session or\nconnecting to an existing AEDT session.\nIf the Antenna Toolkit Wizard is launched from AEDT, the Settings tab does not appear\nbecause the toolkit is directly connected to the specific AEDT session.\nThe wizard has a progress circle and a logger box, where you can see the status of every operation.\nYou can choose different antennas from the Antenna catalog menu to load the antennas\ntemplate.\nFor example, if you select Antennas > Bowtie > Bowtie Normal,\nthe central page is updated to the Synthesis page and it shows the antenna template:\nYou have two options: Synthesis and Generate.\nThe Generate button is unavailable if the wizard is not connected to AEDT.\nThe Synthesis button is for performing the synthesis of the antenna. A connection to AEDT\nYou can see the parameters that control the antenna geometry. Additionally, you can do as many\nsyntheses as you want and even change the antenna template.\nThe Generate button is for creating an HFSS model. It uses the 3D Component,\nCreate Hfss Setup, and Lattice pair checkboxes along with the Sweep Bandwidth % option\nIt also uses the length and frequency unit to perform the HFSS setup.\nDescriptions follow for how to use the checkboxes on the Design tab:\nIf you select the 3D Component checkbox, the toolkit creates the antenna and replaces it\nwith a 3D component.\nIf you select the Generate checkbox, the toolkit automatically creates the boundaries,\nexcitations, and ports needed to simulate the antenna. Once you create an HFSS model, you cannot\ncreate another antenna. Both the Synthesis and Generate buttons become unavailable.\nIf you want to create another antenna, you must restart the toolkit.\nIf you select the Lattice pair checkbox, the toolkit creates a unit cell assigning a\nlattice pair boundary.\nOnce you create an antenna, the Synthesis tab displays an interactive 3D model rather than\nthe image of the antenna template:\nIf AEDT is launched in non-graphical mode, you can still see the generated model.\nIn the wizard, you can modify the parameters interactively, watching both the HFSS model and the\ninteractive 3D plot in the wizard change.\nFinally, on the wizard’s Analysis tab, you have the Get results button.\nThis second button is unavailable until after you analyze the HFSS design.\nWhen you click Get results, the project is analyzed.\nYou can specify the number of cores to use in the simulation.\nOnce the project is solved, you can click Get results on the Analysis tab to view results.\nAntenna wizard"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a bowtie slot antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "BowTieSlot.model_hfss()\n\nDraw a bowtie slot antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.feeder_length",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.feeder_length.html#feeder_length",
        "title": "feeder_length",
        "section": "feeder_length",
        "text": "Helix feeder length.\nfeeder_length\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.feeder_length",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.feeder_length.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.feeder_length",
        "title": "feeder_length > feeder_length > feeder_length",
        "section": "feeder_length > feeder_length",
        "text": "property AxialMode.feeder_length\n\nHelix feeder length.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "Pyramidal.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/conical_spiral",
        "href": "toolkit/models/conical_spiral.html#conical-spiral",
        "title": "Conical spiral",
        "section": "Conical spiral",
        "text": "This page lists the classes available for conical spiral antennas:\nArchimedean(*args, **kwargs)\nManages conical archimedeal spiral antenna.\nYou must use these methods from PyAEDT as shown in this example:\nConical spiral\nArchimedean"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property RectangularPatchProbe.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "PyramidalRidged.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property HPlane.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property BowTieRounded.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "HPlane.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "Pyramidal.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property QuadRidged.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property QuadRidged.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property Corrugated.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_design",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_design.html#connect_design",
        "title": "connect_design",
        "section": "connect_design",
        "text": "Connect to an application design.\nIf a design exists, this method uses the active project and design. If a design does not exist,\nthis method creates a design of the specified type. If no application is specified, the default is \"HFSS\".\nAEDT application name. Options are:\n\"Circuit\"\n\"EMIT\"\n\"HFSS\"\n\"HFSS3DLayout\"\n\"Icepak\"\n\"Maxwell2D\"\n\"Maxwell3D\"\n\"Q2D\"\n\"Q3D\"\n\"Rmxprt\"\n\"TwinBuilder\"\n\"Mechanical\"\nReturns True if the connection to a design is successful, False otherwise.\nconnect_design\n\"HFSS\"\npython:str\n\"Circuit\"\n\"EMIT\"\n\"HFSS\"\n\"HFSS3DLayout\"\n\"Icepak\"\n\"Maxwell2D\"\n\"Maxwell3D\"\n\"Q2D\"\n\"Q3D\"\n\"Rmxprt\"\n\"TwinBuilder\"\n\"Mechanical\"\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_design",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_design.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.connect_design",
        "title": "connect_design > connect_design > connect_design",
        "section": "connect_design > connect_design",
        "text": "ToolkitBackend.connect_design(app_name: str | None = None)\n\nConnect to an application design.\n\nIf a design exists, this method uses the active project and design. If a design does not exist,\nthis method creates a design of the specified type. If no application is specified, the default is \"HFSS\".\n\nParameters\n\napp_name\n\npython:str\n\nAEDT application name. Options are:\n\n\"Circuit\"\n\n\"EMIT\"\n\n\"HFSS\"\n\n\"HFSS3DLayout\"\n\n\"Icepak\"\n\n\"Maxwell2D\"\n\n\"Maxwell3D\"\n\n\"Q2D\"\n\n\"Q3D\"\n\n\"Rmxprt\"\n\n\"TwinBuilder\"\n\n\"Mechanical\"\n\nReturns\n\nbool\n\nReturns True if the connection to a design is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_design()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property PyramidalRidged.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_aedt.html#launch_aedt",
        "title": "launch_aedt",
        "section": "launch_aedt",
        "text": "Launch AEDT.\nThis method is launched in a thread if gRPC is enabled. AEDT is released once it is opened.\nTrue when successful, False when failed.\nlaunch_aedt\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_aedt",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_aedt.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.launch_aedt",
        "title": "launch_aedt > launch_aedt > launch_aedt",
        "section": "launch_aedt > launch_aedt",
        "text": "ToolkitBackend.launch_aedt() -> bool\n\nLaunch AEDT.\n\nThis method is launched in a thread if gRPC is enabled. AEDT is released once it is opened.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.html#archimedean",
        "title": "Archimedean",
        "section": "Archimedean",
        "text": "Manages conical archimedeal spiral antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nConical archimedean spiral object.\nR. Johnson, “Frequency Independent Antennas,” Antenna Engineering Handbook,\n3rd ed. New York, McGraw-Hill, 1993.\nArchimedean.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nArchimedean.create_lattice_pair([...])\nCreate a lattice pair box.\nArchimedean.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nArchimedean.init_model()\nCreate a radiation boundary.\nArchimedean.model_disco()\nModel in PyDiscovery.\nArchimedean.model_hfss()\nDraw a conical archimidean spiral antenna.\nArchimedean.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nArchimedean.setup_disco()\nSet up in PyDiscovery.\nArchimedean.setup_hfss()\nSet up an antenna in HFSS.\nArchimedean.synthesis()\nAntenna synthesis.\nArchimedean.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nArchimedean.antenna_type\n\nArchimedean.coordinate_system\nReference coordinate system.\nArchimedean.frequency\nCentral frequency.\nArchimedean.frequency_unit\nFrequency units.\nArchimedean.length_unit\nLength unit.\nArchimedean.material\nHorn material.\nArchimedean.name\nAntenna name.\nArchimedean.origin\nAntenna origin.\nArchimedean.outer_boundary\nOuter boundary.\nArchimedean.start_frequency\nStart frequency.\nArchimedean.stop_frequency\nStop frequency.\nArchimedean\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.Archimedean\nArchimedean.create_3dcomponent\nArchimedean.create_lattice_pair\nArchimedean.duplicate_along_line\nArchimedean.init_model\nArchimedean.model_disco\nArchimedean.model_hfss\nArchimedean.set_variables_in_hfss\nArchimedean.setup_disco\nArchimedean.setup_hfss\nArchimedean.synthesis\nArchimedean.update_synthesis_parameters\nArchimedean.antenna_type\nArchimedean.coordinate_system\nArchimedean.frequency\nArchimedean.frequency_unit\nArchimedean.length_unit\nArchimedean.material\nArchimedean.name\nArchimedean.origin\nArchimedean.outer_boundary\nArchimedean.start_frequency\nArchimedean.stop_frequency"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean",
        "title": "Archimedean > Archimedean > Archimedean",
        "section": "Archimedean > Archimedean",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean(*args, **kwargs)\n\nManages conical archimedeal spiral antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.Archimedean\n\nConical archimedean spiral object.\n\nNotes\n\n1\n\nR. Johnson, “Frequency Independent Antennas,” Antenna Engineering Handbook,\n3rd ed. New York, McGraw-Hill, 1993.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral import Archimedean\n>>> hfss = Hfss()\n>>> antenna = Archimedean(hfss, start_frequency=20.0,\n...                              stop_frequency=50.0, frequency_unit=\"GHz\",\n...                              outer_boundary='Radiation', length_unit=\"mm\",\n...                              antenna_name=\"Archimedean\", origin=[1, 100, 50])\n>>> antenna.model_hfss()\n>>> antenna.setup_hfss()\n>>> hfss.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nArchimedean.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nArchimedean.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nArchimedean.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nArchimedean.init_model()\n\nCreate a radiation boundary.\n\nArchimedean.model_disco()\n\nModel in PyDiscovery.\n\nArchimedean.model_hfss()\n\nDraw a conical archimidean spiral antenna.\n\nArchimedean.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nArchimedean.setup_disco()\n\nSet up in PyDiscovery.\n\nArchimedean.setup_hfss()\n\nSet up an antenna in HFSS.\n\nArchimedean.synthesis()\n\nAntenna synthesis.\n\nArchimedean.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nArchimedean.antenna_type\n\n\n\nArchimedean.coordinate_system\n\nReference coordinate system.\n\nArchimedean.frequency\n\nCentral frequency.\n\nArchimedean.frequency_unit\n\nFrequency units.\n\nArchimedean.length_unit\n\nLength unit.\n\nArchimedean.material\n\nHorn material.\n\nArchimedean.name\n\nAntenna name.\n\nArchimedean.origin\n\nAntenna origin.\n\nArchimedean.outer_boundary\n\nOuter boundary.\n\nArchimedean.start_frequency\n\nStart frequency.\n\nArchimedean.stop_frequency\n\nStop frequency.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "RectangularPatchInset.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "Pyramidal.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property RectangularPatchProbe.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/index",
        "href": "toolkit/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section provides descriptions of the two APIs available for the AEDT Antenna Toolkit:\nToolkit API: Contains the Toolkit class, which provides methods for\ncontrolling the toolkit workflow. This API provides methods\nfor synthesizing and creating an antenna. You use the Toolkit API at the\ntoolkit level.\nAntenna API: Contains classes for all antenna types available in the toolkit.\nYou use the Antenna API at the model level.\nAPI reference\nToolkit"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.html#bowtieslot",
        "title": "BowTieSlot",
        "section": "BowTieSlot",
        "text": "Manages a bowtie slot antenna.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined.\nThe default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 0.1575.\nWhether to create a parametrized antenna. The default is True.\nBowtie antenna object.\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\nBowTieSlot.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nBowTieSlot.create_lattice_pair([...])\nCreate a lattice pair box.\nBowTieSlot.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nBowTieSlot.init_model()\nCreate a radiation boundary.\nBowTieSlot.model_disco()\nModel in PyDiscovery.\nBowTieSlot.model_hfss()\nDraw a bowtie slot antenna.\nBowTieSlot.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nBowTieSlot.setup_disco()\nSet up the model in PyDiscovery.\nBowTieSlot.setup_hfss()\nSet up an antenna in HFSS.\nBowTieSlot.synthesis()\nAntenna synthesis.\nBowTieSlot.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nBowTieSlot.antenna_type\n\nBowTieSlot.coordinate_system\nReference coordinate system.\nBowTieSlot.frequency\nCenter frequency.\nBowTieSlot.frequency_unit\nFrequency units.\nBowTieSlot.length_unit\nLength unit.\nBowTieSlot.material\nSubstrate material.\nBowTieSlot.material_properties\nSubstrate material properties.\nBowTieSlot.name\nAntenna name.\nBowTieSlot.origin\nAntenna origin.\nBowTieSlot.outer_boundary\nOuter boundary.\nBowTieSlot.substrate_height\nSubstrate height.\nBowTieSlot\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n0.1575\noptional\nTrue\naedt.toolkits.antenna.BowTieSlot\nBowTieSlot.create_3dcomponent\nBowTieSlot.create_lattice_pair\nBowTieSlot.duplicate_along_line\nBowTieSlot.init_model\nBowTieSlot.model_disco\nBowTieSlot.model_hfss\nBowTieSlot.set_variables_in_hfss\nBowTieSlot.setup_disco\nBowTieSlot.setup_hfss\nBowTieSlot.synthesis\nBowTieSlot.update_synthesis_parameters\nBowTieSlot.antenna_type\nBowTieSlot.coordinate_system\nBowTieSlot.frequency\nBowTieSlot.frequency_unit\nBowTieSlot.length_unit\nBowTieSlot.material\nBowTieSlot.material_properties\nBowTieSlot.name\nBowTieSlot.origin\nBowTieSlot.outer_boundary\nBowTieSlot.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot",
        "title": "BowTieSlot > BowTieSlot > BowTieSlot",
        "section": "BowTieSlot > BowTieSlot",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot(*args, **kwargs)\n\nManages a bowtie slot antenna.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined.\nThe default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 0.1575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.BowTieSlot\n\nBowtie antenna object.\n\nNotes\n\n1\n\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie import BowTieSlot\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = BowTieSlot(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = BowTieSlot(app, origin=[200, 50, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nBowTieSlot.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nBowTieSlot.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nBowTieSlot.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nBowTieSlot.init_model()\n\nCreate a radiation boundary.\n\nBowTieSlot.model_disco()\n\nModel in PyDiscovery.\n\nBowTieSlot.model_hfss()\n\nDraw a bowtie slot antenna.\n\nBowTieSlot.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nBowTieSlot.setup_disco()\n\nSet up the model in PyDiscovery.\n\nBowTieSlot.setup_hfss()\n\nSet up an antenna in HFSS.\n\nBowTieSlot.synthesis()\n\nAntenna synthesis.\n\nBowTieSlot.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nBowTieSlot.antenna_type\n\n\n\nBowTieSlot.coordinate_system\n\nReference coordinate system.\n\nBowTieSlot.frequency\n\nCenter frequency.\n\nBowTieSlot.frequency_unit\n\nFrequency units.\n\nBowTieSlot.length_unit\n\nLength unit.\n\nBowTieSlot.material\n\nSubstrate material.\n\nBowTieSlot.material_properties\n\nSubstrate material properties.\n\nBowTieSlot.name\n\nAntenna name.\n\nBowTieSlot.origin\n\nAntenna origin.\n\nBowTieSlot.outer_boundary\n\nOuter boundary.\n\nBowTieSlot.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property QuadRidged.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "RectangularPatchInset.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property RectangularPatchEdge.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContributing\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAEDT or its toolkits.\nThe following contribution information is specific to PyAEDT toolkits.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest version of this toolkit in\ndevelopment mode, run:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#add-new-antennas",
        "title": "Contribute > Add new antennas",
        "section": "Add new antennas",
        "text": "TBD\nAdd new antennas"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the AEDT Antenna Toolkit Issues page\nto report bugs and request new features.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release is hosted at https://aedt.antenna.toolkit.docs.pyansys.com/.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from viewing\nthe documentation for the latest stable release to viewing the documentation for the development version\nor previously released versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyAEDT toolkit is compliant with PyAnsys code style. It uses the tool\npre-commit to select the code style. You can install\nand activate this tool with:\nYou can also install this as a pre-commit hook with:\nThis way, it’s not possible for you to push code that fails the style checks.\nFor example:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#maximum-line-length",
        "title": "Contribute > Maximum line length",
        "section": "Maximum line length",
        "text": "Best practice is to keep the length at or below 120 characters for code\nand comments. Lines longer than this might not display properly on some terminals\nand tools or might be difficult to follow.\nMaximum line length"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property BowTieNormal.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property Pyramidal.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "BowTieRounded.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "RectangularPatchInset.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property Corrugated.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property EPlane.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "PyramidalRidged.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property QuadRidged.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.direction",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.direction.html#direction",
        "title": "direction",
        "section": "direction",
        "text": "Helix direction. 0 for left, and 1 for right.\ndirection\n0\n1\npython:int"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.direction",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.direction.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.direction",
        "title": "direction > direction > direction",
        "section": "direction > direction",
        "text": "property AxialMode.direction\n\nHelix direction. 0 for left, and 1 for right.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "AxialMode.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property HPlane.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.html#bowtienormal",
        "title": "BowTieNormal",
        "section": "BowTieNormal",
        "text": "Manages a bowtie antenna.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined. The default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 1.575.\nWhether to create a parametrized antenna. The default is True.\nBowtie antenna object.\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\nBowTieNormal.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nBowTieNormal.create_lattice_pair([...])\nCreate a lattice pair box.\nBowTieNormal.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nBowTieNormal.init_model()\nCreate a radiation boundary.\nBowTieNormal.model_disco()\nModel the bowtie antenna in PyDiscovery.\nBowTieNormal.model_hfss()\nDraw a bowtie antenna.\nBowTieNormal.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nBowTieNormal.setup_disco()\nSet up the model in PyDiscovery.\nBowTieNormal.setup_hfss()\nSet up an antenna in HFSS.\nBowTieNormal.synthesis()\nAntenna synthesis.\nBowTieNormal.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nBowTieNormal.antenna_type\n\nBowTieNormal.coordinate_system\nReference coordinate system.\nBowTieNormal.frequency\nCenter frequency.\nBowTieNormal.frequency_unit\nFrequency units.\nBowTieNormal.length_unit\nLength unit.\nBowTieNormal.material\nSubstrate material.\nBowTieNormal.material_properties\nSubstrate material properties.\nBowTieNormal.name\nAntenna name.\nBowTieNormal.origin\nAntenna origin.\nBowTieNormal.outer_boundary\nOuter boundary.\nBowTieNormal.substrate_height\nSubstrate height.\nBowTieNormal\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n1.575\noptional\nTrue\naedt.toolkits.antenna.BowTie\nBowTieNormal.create_3dcomponent\nBowTieNormal.create_lattice_pair\nBowTieNormal.duplicate_along_line\nBowTieNormal.init_model\nBowTieNormal.model_disco\nBowTieNormal.model_hfss\nBowTieNormal.set_variables_in_hfss\nBowTieNormal.setup_disco\nBowTieNormal.setup_hfss\nBowTieNormal.synthesis\nBowTieNormal.update_synthesis_parameters\nBowTieNormal.antenna_type\nBowTieNormal.coordinate_system\nBowTieNormal.frequency\nBowTieNormal.frequency_unit\nBowTieNormal.length_unit\nBowTieNormal.material\nBowTieNormal.material_properties\nBowTieNormal.name\nBowTieNormal.origin\nBowTieNormal.outer_boundary\nBowTieNormal.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal",
        "title": "BowTieNormal > BowTieNormal > BowTieNormal",
        "section": "BowTieNormal > BowTieNormal",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal(*args, **kwargs)\n\nManages a bowtie antenna.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material. If a material is not defined, a new\nmaterial, parametrized, is defined. The default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 1.575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.BowTie\n\nBowtie antenna object.\n\nNotes\n\n1\n\nC. Balanis, “Wideband and Travelling-Wave Antennas,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie import BowTieNormal\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = BowTieNormal(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = BowTieNormal(app, origin=[200, 50, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nBowTieNormal.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nBowTieNormal.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nBowTieNormal.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nBowTieNormal.init_model()\n\nCreate a radiation boundary.\n\nBowTieNormal.model_disco()\n\nModel the bowtie antenna in PyDiscovery.\n\nBowTieNormal.model_hfss()\n\nDraw a bowtie antenna.\n\nBowTieNormal.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nBowTieNormal.setup_disco()\n\nSet up the model in PyDiscovery.\n\nBowTieNormal.setup_hfss()\n\nSet up an antenna in HFSS.\n\nBowTieNormal.synthesis()\n\nAntenna synthesis.\n\nBowTieNormal.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nBowTieNormal.antenna_type\n\n\n\nBowTieNormal.coordinate_system\n\nReference coordinate system.\n\nBowTieNormal.frequency\n\nCenter frequency.\n\nBowTieNormal.frequency_unit\n\nFrequency units.\n\nBowTieNormal.length_unit\n\nLength unit.\n\nBowTieNormal.material\n\nSubstrate material.\n\nBowTieNormal.material_properties\n\nSubstrate material properties.\n\nBowTieNormal.name\n\nAntenna name.\n\nBowTieNormal.origin\n\nAntenna origin.\n\nBowTieNormal.outer_boundary\n\nOuter boundary.\n\nBowTieNormal.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property BowTieSlot.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "RectangularPatchEdge.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/api",
        "href": "toolkit/api.html#toolkit-api",
        "title": "Toolkit API",
        "section": "Toolkit API",
        "text": "The Toolkit API contains the Toolkit class, which provides methods for\ncontrolling the toolkit workflow. This API provides methods\nfor synthesizing and creating an antenna. You use the Toolkit API at the\ntoolkit level.\nThe common methods for creating an AEDT session or connecting to an existing AEDT session are provided by the\nCommon PyAEDT toolkit library.\nToolkitBackend()\nProvides methods for controlling the toolkit workflow.\nYou can use the Toolkit API as shown in this example:\nToolkit API\nToolkit\nToolkitBackend"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "AxialMode.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "BowTieRounded.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/patch",
        "href": "toolkit/models/patch.html#patch",
        "title": "Patch",
        "section": "Patch",
        "text": "This page lists the classes available for patch antennas:\nRectangularPatchEdge(*args, **kwargs)\nManages a rectangular patch edge antenna.\nRectangularPatchProbe(*args, **kwargs)\nManages a rectangular patch antenna with a coaxial probe.\nRectangularPatchInset(*args, **kwargs)\nManages a rectangular patch antenna inset fed.\nYou must use these methods from PyAEDT as shown in this example:\nPatch\nRectangularPatchEdge\nRectangularPatchProbe\nRectangularPatchInset"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "HPlane.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a bowtie antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "BowTieNormal.model_hfss()\n\nDraw a bowtie antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property BowTieNormal.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "PyramidalRidged.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property Pyramidal.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property BowTieRounded.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "Archimedean.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "RectangularPatchInset.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "RectangularPatchProbe.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "RectangularPatchEdge.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property BowTieSlot.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property EPlane.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property AxialMode.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Corrugated.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "EPlane.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property AxialMode.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property PyramidalRidged.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property BowTieNormal.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "BowTieSlot.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "RectangularPatchInset.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "Elliptical.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.html#pyramidalridged",
        "title": "PyramidalRidged",
        "section": "PyramidalRidged",
        "text": "Manages a pyramidal ridged horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nPyramidal ridged horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nPyramidalRidged.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nPyramidalRidged.create_lattice_pair([...])\nCreate a lattice pair box.\nPyramidalRidged.duplicate_along_line(vector)\nDuplicate the object along a line.\nPyramidalRidged.init_model()\nCreate a radiation boundary.\nPyramidalRidged.model_disco()\nModel in PyDiscovery.\nPyramidalRidged.model_hfss()\nDraw conical horn antenna.\nPyramidalRidged.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nPyramidalRidged.setup_disco()\nSet up model in PyDiscovery.\nPyramidalRidged.setup_hfss()\nSet up an antenna in HFSS.\nPyramidalRidged.synthesis()\nAntenna synthesis.\nPyramidalRidged.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nPyramidalRidged.antenna_type\n\nPyramidalRidged.coordinate_system\nReference coordinate system.\nPyramidalRidged.frequency\nCenter frequency.\nPyramidalRidged.frequency_unit\nFrequency units.\nPyramidalRidged.length_unit\nLength unit.\nPyramidalRidged.material\nHorn material.\nPyramidalRidged.material_properties\nSubstrate material properties.\nPyramidalRidged.name\nAntenna name.\nPyramidalRidged.origin\nAntenna origin.\nPyramidalRidged.outer_boundary\nOuter boundary.\nPyramidalRidged\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.PyramidalRidged\nPyramidalRidged.create_3dcomponent\nPyramidalRidged.create_lattice_pair\nPyramidalRidged.duplicate_along_line\nPyramidalRidged.init_model\nPyramidalRidged.model_disco\nPyramidalRidged.model_hfss\nPyramidalRidged.set_variables_in_hfss\nPyramidalRidged.setup_disco\nPyramidalRidged.setup_hfss\nPyramidalRidged.synthesis\nPyramidalRidged.update_synthesis_parameters\nPyramidalRidged.antenna_type\nPyramidalRidged.coordinate_system\nPyramidalRidged.frequency\nPyramidalRidged.frequency_unit\nPyramidalRidged.length_unit\nPyramidalRidged.material\nPyramidalRidged.material_properties\nPyramidalRidged.name\nPyramidalRidged.origin\nPyramidalRidged.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged",
        "title": "PyramidalRidged > PyramidalRidged > PyramidalRidged",
        "section": "PyramidalRidged > PyramidalRidged",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.PyramidalRidged(*args, **kwargs)\n\nManages a pyramidal ridged horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.PyramidalRidged\n\nPyramidal ridged horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import PyramidalRidged\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = PyramidalRidged(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = PyramidalRidged(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nPyramidalRidged.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nPyramidalRidged.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nPyramidalRidged.duplicate_along_line(vector)\n\nDuplicate the object along a line.\n\nPyramidalRidged.init_model()\n\nCreate a radiation boundary.\n\nPyramidalRidged.model_disco()\n\nModel in PyDiscovery.\n\nPyramidalRidged.model_hfss()\n\nDraw conical horn antenna.\n\nPyramidalRidged.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nPyramidalRidged.setup_disco()\n\nSet up model in PyDiscovery.\n\nPyramidalRidged.setup_hfss()\n\nSet up an antenna in HFSS.\n\nPyramidalRidged.synthesis()\n\nAntenna synthesis.\n\nPyramidalRidged.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nPyramidalRidged.antenna_type\n\n\n\nPyramidalRidged.coordinate_system\n\nReference coordinate system.\n\nPyramidalRidged.frequency\n\nCenter frequency.\n\nPyramidalRidged.frequency_unit\n\nFrequency units.\n\nPyramidalRidged.length_unit\n\nLength unit.\n\nPyramidalRidged.material\n\nHorn material.\n\nPyramidalRidged.material_properties\n\nSubstrate material properties.\n\nPyramidalRidged.name\n\nAntenna name.\n\nPyramidalRidged.origin\n\nAntenna origin.\n\nPyramidalRidged.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "Archimedean.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "EPlane.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_antenna",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_antenna.html#get_antenna",
        "title": "get_antenna",
        "section": "get_antenna",
        "text": "Synthesize and create an antenna in HFSS.\nType of antenna to create.\nWhether to only synthesize the anttena. The default is False.\nTrue when successful, False when failed.\nget_antenna\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_antenna",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_antenna.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_antenna",
        "title": "get_antenna > get_antenna > get_antenna",
        "section": "get_antenna > get_antenna",
        "text": "ToolkitBackend.get_antenna(antenna, synth_only=False)\n\nSynthesize and create an antenna in HFSS.\n\nParameters\n\nantenna\n\n:class:\n\nType of antenna to create.\n\nsynth_only\n\nbool, optional\n\nWhether to only synthesize the anttena. The default is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.api import ToolkitBackend\n>>> import time\n>>> toolkit = ToolkitBackend()\n>>> msg1 = toolkit_api.launch_thread(toolkit.launch_aedt)\n>>> idle = toolkit_api.wait_to_be_idle()\n>>> toolkit.get_antenna(\"BowTie\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Substrate material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property RectangularPatchInset.material\n\nSubstrate material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "Elliptical.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property RectangularPatchInset.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "Corrugated.model_hfss()\n\nDraw a conical horn antenna.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property Conical.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property BowTieSlot.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "Conical.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.html#standardwaveguide",
        "title": "StandardWaveguide",
        "section": "StandardWaveguide",
        "text": "Provides base methods common to standard waveguides.\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nStandard waveguide object.\nStandardWaveguide.find_waveguide(freq[, units])\nFind the closest standard waveguide for the operational frequency.\nStandardWaveguide.get_waveguide_dimensions(name)\nGet waveguide dimensions.\nStandardWaveguide.waveguide_list\nStandard waveguide list.\nStandardWaveguide.wg\n\nStandardWaveguide\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\naedt.toolkits.antenna.common.StandardWaveguide\nStandardWaveguide.find_waveguide\nStandardWaveguide.get_waveguide_dimensions\nStandardWaveguide.waveguide_list\nStandardWaveguide.wg"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide",
        "title": "StandardWaveguide > StandardWaveguide > StandardWaveguide",
        "section": "StandardWaveguide > StandardWaveguide",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide(frequency=10, frequency_unit='GHz')\n\nProvides base methods common to standard waveguides.\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nReturns\n\naedt.toolkits.antenna.common.StandardWaveguide\n\nStandard waveguide object.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.common import StandardWaveguide\n>>> wg_calc = StandardWaveguide()\n>>> wg_dim = wg_calc.get_waveguide_dimensions(\"WR-75\")\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nStandardWaveguide.find_waveguide(freq[, units])\n\nFind the closest standard waveguide for the operational frequency.\n\nStandardWaveguide.get_waveguide_dimensions(name)\n\nGet waveguide dimensions.\n\n\n\nAttributes\n\n\n\n\n\n\n\nStandardWaveguide.waveguide_list\n\nStandard waveguide list.\n\nStandardWaveguide.wg\n\n\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Pyramidal.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property AxialMode.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property Archimedean.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw elliptical horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "Elliptical.model_hfss()\n\nDraw elliptical horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "Elliptical.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "HPlane.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/horn",
        "href": "toolkit/models/horn.html#horn",
        "title": "Horn",
        "section": "Horn",
        "text": "This page lists the classes available for horns:\nConical(*args, **kwargs)\nManages a conical horn antenna.\nCorrugated(*args, **kwargs)\nManages a corrugated horn antenna.\nElliptical(*args, **kwargs)\nManages an elliptical horn antenna.\nEPlane(*args, **kwargs)\nManages an E plane horn antenna.\nHPlane(*args, **kwargs)\nManages an H plane horn antenna.\nPyramidal(*args, **kwargs)\nManages a pyramidal horn antenna.\nPyramidalRidged(*args, **kwargs)\nManages a pyramidal ridged horn antenna.\nQuadRidged(*args, **kwargs)\nManages a quad-ridged horn antenna.\nYou must use these methods from PyAEDT as shown in this example:\nHorn\nConical\nCorrugated\nElliptical\nEPlane\nHPlane\nPyramidal\nPyramidalRidged\nQuadRidged"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property Conical.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "RectangularPatchEdge.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property HPlane.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.analyze",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.analyze.html#analyze",
        "title": "analyze",
        "section": "analyze",
        "text": "Analyze the design.\nLaunch analysis in batch. AEDT is released once it is opened.\nTrue when successful, False when failed.\nanalyze\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.analyze",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.analyze.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.analyze",
        "title": "analyze > analyze > analyze",
        "section": "analyze > analyze",
        "text": "ToolkitBackend.analyze()\n\nAnalyze the design.\n\nLaunch analysis in batch. AEDT is released once it is opened.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> import time\n>>> from ansys.aedt.toolkits.antenna.backend.api import ToolkitBackend\n>>> toolkit = ToolkitBackend()\n>>> msg1 = toolkit_api.launch_thread(toolkit.launch_aedt)\n>>> idle = toolkit_api.wait_to_be_idle()\n>>> toolkit.get_antenna(\"BowTie\")\n>>> toolkit.analyze()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "EPlane.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property Archimedean.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property BowTieRounded.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "EPlane.setup_disco()\n\nSet up model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "Pyramidal.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "Pyramidal.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "EPlane.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property EPlane.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "Conical.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property BowTieSlot.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/common",
        "href": "toolkit/models/common.html#common",
        "title": "Common",
        "section": "Common",
        "text": "This pages lists common methods available in the Antenna API:\nTransmissionLine([frequency, frequency_unit])\nProvides base methods common to transmission line calculations.\nStandardWaveguide([frequency, frequency_unit])\nProvides base methods common to standard waveguides.\nYou must use these methods from PyAEDT as shown in this example:\nCommon\nTransmissionLine\nStandardWaveguide"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency.html#frequency",
        "title": "frequency",
        "section": "frequency",
        "text": "Center frequency.\nfrequency\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.frequency",
        "title": "frequency > frequency > frequency",
        "section": "frequency > frequency",
        "text": "property RectangularPatchInset.frequency\n\nCenter frequency.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "Pyramidal.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property BowTieSlot.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "Corrugated.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "AxialMode.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.find_waveguide",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.find_waveguide.html#find_waveguide",
        "title": "find_waveguide",
        "section": "find_waveguide",
        "text": "Find the closest standard waveguide for the operational frequency.\nOperational frequency.\nInput frequency units. The default is \"GHz\".\nWaveguide name.\nfind_waveguide\npython:float\npython:str\n\"GHz\"\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.find_waveguide",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.find_waveguide.html#ansys.aedt.toolkits.antenna.backend.antenna_models.common.StandardWaveguide.find_waveguide",
        "title": "find_waveguide > find_waveguide > find_waveguide",
        "section": "find_waveguide > find_waveguide",
        "text": "StandardWaveguide.find_waveguide(freq, units='GHz')\n\nFind the closest standard waveguide for the operational frequency.\n\nParameters\n\nfreq\n\npython:float\n\nOperational frequency.\n\nunits\n\npython:str\n\nInput frequency units. The default is \"GHz\".\n\nReturns\n\npython:str\n\nWaveguide name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieRounded.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "BowTieRounded.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw a rectangular patch edge antenna inset fed.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchEdge.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "RectangularPatchEdge.model_hfss()\n\nDraw a rectangular patch edge antenna inset fed.\n\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "QuadRidged.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency_unit.html#frequency_unit",
        "title": "frequency_unit",
        "section": "frequency_unit",
        "text": "Frequency units.\nfrequency_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.frequency_unit",
        "title": "frequency_unit > frequency_unit > frequency_unit",
        "section": "frequency_unit > frequency_unit",
        "text": "property Conical.frequency_unit\n\nFrequency units.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "RectangularPatchProbe.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Elliptical.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Elliptical.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "QuadRidged.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property RectangularPatchInset.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.length_unit.html#length_unit",
        "title": "length_unit",
        "section": "length_unit",
        "text": "Length unit.\nlength_unit\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.length_unit",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.length_unit.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.length_unit",
        "title": "length_unit > length_unit > length_unit",
        "section": "length_unit > length_unit",
        "text": "property QuadRidged.length_unit\n\nLength unit.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_hfss.html#model_hfss",
        "title": "model_hfss",
        "section": "model_hfss",
        "text": "Draw conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\nmodel_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.model_hfss",
        "title": "model_hfss > model_hfss > model_hfss",
        "section": "model_hfss > model_hfss",
        "text": "QuadRidged.model_hfss()\n\nDraw conical horn antenna.\nOnce the antenna is created, this method is not used anymore.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "Conical.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Horn material.\nmaterial\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property EPlane.material\n\nHorn material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property RectangularPatchProbe.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "QuadRidged.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_project_name",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_project_name.html#get_project_name",
        "title": "get_project_name",
        "section": "get_project_name",
        "text": "Get the project name from the project path.\nProject name.\nget_project_name\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_project_name",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_project_name.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.get_project_name",
        "title": "get_project_name > get_project_name > get_project_name",
        "section": "get_project_name > get_project_name",
        "text": "static ToolkitBackend.get_project_name(project_path) -> str\n\nGet the project name from the project path.\n\nReturns\n\npython:str\n\nProject name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material_properties.html#material_properties",
        "title": "material_properties",
        "section": "material_properties",
        "text": "Substrate material properties.\nmaterial_properties\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material_properties",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material_properties.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Conical.material_properties",
        "title": "material_properties > material_properties > material_properties",
        "section": "material_properties > material_properties",
        "text": "property Conical.material_properties\n\nSubstrate material properties.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.html#rectangularpatchinset",
        "title": "RectangularPatchInset",
        "section": "RectangularPatchInset",
        "text": "Manages a rectangular patch antenna inset fed.\nThis class is accessible through the Hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nSubstrate material. If the material is not defined, a new\nmaterial, parametrized, is created. The default is \"FR4_epoxy\".\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\nLength units. The default is \"mm\".\nSubstrate height. The default is 1.575.\nWhether to create a parametrized antenna. The default is True.\nPatch antenna object.\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\nRectangularPatchInset.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nRectangularPatchInset.create_lattice_pair([...])\nCreate a lattice pair box.\nRectangularPatchInset.duplicate_along_line(vector)\nDuplicate the object along a line.\nRectangularPatchInset.init_model()\nCreate a radiation boundary.\nRectangularPatchInset.model_disco()\nModel in PyDiscovery.\nRectangularPatchInset.model_hfss()\nDraw a rectangular patch antenna inset fed.\nRectangularPatchInset.set_variables_in_hfss([...])\nCreate HFSS design variables.\nRectangularPatchInset.setup_disco()\nSet up the model in PyDiscovery.\nRectangularPatchInset.setup_hfss()\nSet up an antenna in HFSS.\nRectangularPatchInset.synthesis()\nAntenna synthesis.\nRectangularPatchInset.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nRectangularPatchInset.antenna_type\n\nRectangularPatchInset.coordinate_system\nReference coordinate system.\nRectangularPatchInset.frequency\nCenter frequency.\nRectangularPatchInset.frequency_unit\nFrequency units.\nRectangularPatchInset.length_unit\nLength unit.\nRectangularPatchInset.material\nSubstrate material.\nRectangularPatchInset.material_properties\nSubstrate material properties.\nRectangularPatchInset.name\nAntenna name.\nRectangularPatchInset.origin\nAntenna origin.\nRectangularPatchInset.outer_boundary\nOuter boundary.\nRectangularPatchInset.substrate_height\nSubstrate height.\nRectangularPatchInset\nHfss\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"FR4_epoxy\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\npython:float\noptional\n1.575\noptional\nTrue\naedt.toolkits.antenna.RectangularPatchInset\nRectangularPatchInset.create_3dcomponent\nRectangularPatchInset.create_lattice_pair\nRectangularPatchInset.duplicate_along_line\nRectangularPatchInset.init_model\nRectangularPatchInset.model_disco\nRectangularPatchInset.model_hfss\nRectangularPatchInset.set_variables_in_hfss\nRectangularPatchInset.setup_disco\nRectangularPatchInset.setup_hfss\nRectangularPatchInset.synthesis\nRectangularPatchInset.update_synthesis_parameters\nRectangularPatchInset.antenna_type\nRectangularPatchInset.coordinate_system\nRectangularPatchInset.frequency\nRectangularPatchInset.frequency_unit\nRectangularPatchInset.length_unit\nRectangularPatchInset.material\nRectangularPatchInset.material_properties\nRectangularPatchInset.name\nRectangularPatchInset.origin\nRectangularPatchInset.outer_boundary\nRectangularPatchInset.substrate_height"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset",
        "title": "RectangularPatchInset > RectangularPatchInset > RectangularPatchInset",
        "section": "RectangularPatchInset > RectangularPatchInset",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset(*args, **kwargs)\n\nManages a rectangular patch antenna inset fed.\n\nThis class is accessible through the Hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nSubstrate material. If the material is not defined, a new\nmaterial, parametrized, is created. The default is \"FR4_epoxy\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are\n\"FEBI\", \"PML\", \"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nsubstrate_height\n\npython:float, optional\n\nSubstrate height. The default is 1.575.\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna. The default is True.\n\nReturns\n\naedt.toolkits.antenna.RectangularPatchInset\n\nPatch antenna object.\n\nNotes\n\n1\n\nBalanis, “Microstrip Antennas,” Antenna Theory, 2nd Ed. New York: Wiley, 1997.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.patch import RectangularPatchInset\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = RectangularPatchInset(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRectangularPatchInset.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nRectangularPatchInset.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nRectangularPatchInset.duplicate_along_line(vector)\n\nDuplicate the object along a line.\n\nRectangularPatchInset.init_model()\n\nCreate a radiation boundary.\n\nRectangularPatchInset.model_disco()\n\nModel in PyDiscovery.\n\nRectangularPatchInset.model_hfss()\n\nDraw a rectangular patch antenna inset fed.\n\nRectangularPatchInset.set_variables_in_hfss([...])\n\nCreate HFSS design variables.\n\nRectangularPatchInset.setup_disco()\n\nSet up the model in PyDiscovery.\n\nRectangularPatchInset.setup_hfss()\n\nSet up an antenna in HFSS.\n\nRectangularPatchInset.synthesis()\n\nAntenna synthesis.\n\nRectangularPatchInset.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nRectangularPatchInset.antenna_type\n\n\n\nRectangularPatchInset.coordinate_system\n\nReference coordinate system.\n\nRectangularPatchInset.frequency\n\nCenter frequency.\n\nRectangularPatchInset.frequency_unit\n\nFrequency units.\n\nRectangularPatchInset.length_unit\n\nLength unit.\n\nRectangularPatchInset.material\n\nSubstrate material.\n\nRectangularPatchInset.material_properties\n\nSubstrate material properties.\n\nRectangularPatchInset.name\n\nAntenna name.\n\nRectangularPatchInset.origin\n\nAntenna origin.\n\nRectangularPatchInset.outer_boundary\n\nOuter boundary.\n\nRectangularPatchInset.substrate_height\n\nSubstrate height.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property Corrugated.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.save_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.save_project.html#save_project",
        "title": "save_project",
        "section": "save_project",
        "text": "Save the project.\nThis method uses the properties to get the project path. This method is launched in a thread.\nPath of the AEDT project. The default value is None, in which\ncase the current file is overwritten.\nRelease PyAEDT object. The default value is True.\nReturns True if the connection is successful, False otherwise.\nsave_project\npython:str\noptional\nNone\noptional\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.save_project",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.save_project.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.save_project",
        "title": "save_project > save_project > save_project",
        "section": "save_project > save_project",
        "text": "ToolkitBackend.save_project(project_path=None, release_aedt=True)\n\nSave the project.\n\nThis method uses the properties to get the project path. This method is launched in a thread.\n\nParameters\n\nproject_path\n\npython:str, optional\n\nPath of the AEDT project. The default value is None, in which\ncase the current file is overwritten.\n\nrelease_aedt\n\nbool, optional\n\nRelease PyAEDT object. The default value is True.\n\nReturns\n\nbool\n\nReturns True if the connection is successful, False otherwise.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.save_project()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/user_guide",
        "href": "getting_started/user_guide.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "You have multiple options for installing and launching the AEDT Antenna Toolkit:\nYou can install the toolkit directly in AEDT using an installation script and then launch it as a wizard.\nFor more information, see install-toolkit-AEDT.\nYou can install the toolkit from a Python console and then launch the Antenna wizard.\nFor more information, see install_toolkit_console_ui.\nYou can install the toolkit from a Python console and then use the toolkit’s APIs.\nFor more information, see install_toolkit_console_api.\nUser guide"
    },
    {
        "objectID": "getting_started/user_guide",
        "href": "getting_started/user_guide.html#install-toolkit-in-aedt-and-launch-the-antenna-wizard",
        "title": "User guide > Install toolkit in AEDT and launch the Antenna wizard",
        "section": "Install toolkit in AEDT and launch the Antenna wizard",
        "text": "You can install the AEDT Antenna Toolkit directly in AEDT using the base\ninterpreter from the AEDT installation.\nFrom Install from a Python file,\nfollow the steps to install PyAEDT inside AEDT.\nIn AEDT, select Tools > Toolkit > PyAEDT > Console to load the PyAEDT console:\nIn the PyAEDT console, run these commands to add the Antenna Toolkit as a wizard (toolkit UI) in AEDT:\nIn the AEDT toolbar, click the AntennaWizard button to open this wizard in AEDT:\nThe Antenna Toolkit Wizard is connected directly to the AEDT session. For wizard usage information,\nsee ../toolkit/ui.\nInstall toolkit in AEDT and launch the Antenna wizard"
    },
    {
        "objectID": "getting_started/user_guide",
        "href": "getting_started/user_guide.html#install-toolkit-from-python-console-and-launch-the-antenna-wizard",
        "title": "User guide > Install toolkit from Python console and launch the Antenna wizard",
        "section": "Install toolkit from Python console and launch the Antenna wizard",
        "text": "You can install the AEDT Antenna Toolkit in a specific Python environment from the AEDT console.\nIf you have an existing virtual environment, skip step 1.\nIf you have already installed the toolkit in your virtual environment, skip step 2.\nCreate a fresh-clean Python environment and activate it:\nInstall the toolkit from the GitHub repository:\nLaunch the Antenna Toolkit Wizard:\nOn the AEDT Settings tab, create an AEDT session or connect to an existing one:\nFor wizard usage information, see ../toolkit/ui.\nInstall toolkit from Python console and launch the Antenna wizard"
    },
    {
        "objectID": "getting_started/user_guide",
        "href": "getting_started/user_guide.html#install-toolkit-from-python-console-and-use-the-toolkits-apis",
        "title": "User guide > Install toolkit from Python console and use the toolkit’s APIs",
        "section": "Install toolkit from Python console and use the toolkit’s APIs",
        "text": "You can install the toolkit in a specific Python environment and use the toolkit’s APIs.\nThe code example included in this topic shows how to use the APIs at the model level\nand toolkit level.\nIf you have an existing virtual environment, skip step 1.\nIf you have already installed the toolkit in your virtual environment, skip step 2.\nCreate a fresh-clean Python environment and activate it:\nInstall the toolkit from the GitHub repository:\nOpen a Python console in your virtual environment:\nFrom the command line, use the toolkit to create an antenna.\nThis code shows how to launch AEDT, create and synthesize a bowtie\nantenna, and run a simulation in HFSS:\nTo create an antenna from the toolkit level, use the Toolkit\nclass.\nThis code shows how to use the Toolkit\nclass to get available antennas and their properties, open AEDT, update antenna properties,\nand create a bowtie antenna:\nInstall toolkit from Python console and use the toolkit’s APIs\nToolkit\nToolkit"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.html#hplane",
        "title": "HPlane",
        "section": "HPlane",
        "text": "Manages an H plane horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nH plane horn object.\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\nHPlane.create_3dcomponent([component_file, ...])\nCreate a 3D component of the antenna.\nHPlane.create_lattice_pair([lattice_height, ...])\nCreate a lattice pair box.\nHPlane.duplicate_along_line(vector[, num_clones])\nDuplicate the object along a line.\nHPlane.init_model()\nCreate a radiation boundary.\nHPlane.model_disco()\nModel in PyDiscovery.\nHPlane.model_hfss()\nDraw H plane horn antenna.\nHPlane.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nHPlane.setup_disco()\nSet up model in PyDiscovery.\nHPlane.setup_hfss()\nSet up an antenna in HFSS.\nHPlane.synthesis()\nAntenna synthesis.\nHPlane.update_synthesis_parameters(new_params)\nUpdate the synthesis parameter from the antenna list.\nHPlane.antenna_type\n\nHPlane.coordinate_system\nReference coordinate system.\nHPlane.frequency\nCenter frequency.\nHPlane.frequency_unit\nFrequency units.\nHPlane.length_unit\nLength unit.\nHPlane.material\nHorn material.\nHPlane.material_properties\nSubstrate material properties.\nHPlane.name\nAntenna name.\nHPlane.origin\nAntenna origin.\nHPlane.outer_boundary\nOuter boundary.\nHPlane\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.HPlaneHorn\nHPlane.create_3dcomponent\nHPlane.create_lattice_pair\nHPlane.duplicate_along_line\nHPlane.init_model\nHPlane.model_disco\nHPlane.model_hfss\nHPlane.set_variables_in_hfss\nHPlane.setup_disco\nHPlane.setup_hfss\nHPlane.synthesis\nHPlane.update_synthesis_parameters\nHPlane.antenna_type\nHPlane.coordinate_system\nHPlane.frequency\nHPlane.frequency_unit\nHPlane.length_unit\nHPlane.material\nHPlane.material_properties\nHPlane.name\nHPlane.origin\nHPlane.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane",
        "title": "HPlane > HPlane > HPlane",
        "section": "HPlane > HPlane",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane(*args, **kwargs)\n\nManages an H plane horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.HPlaneHorn\n\nH plane horn object.\n\nNotes\n\n1\n\nC. Balanis, “Aperture Antennas: Analysis, Design, and Applications,”\nModern Antenna Handbook, New York, 2008.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import HPlane\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = HPlane(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> oantenna2 = HPlane(app, origin=[0.2, 0.5, 0])\n>>> oantenna2.model_hfss()\n>>> oantenna2.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nHPlane.create_3dcomponent([component_file, ...])\n\nCreate a 3D component of the antenna.\n\nHPlane.create_lattice_pair([lattice_height, ...])\n\nCreate a lattice pair box.\n\nHPlane.duplicate_along_line(vector[, num_clones])\n\nDuplicate the object along a line.\n\nHPlane.init_model()\n\nCreate a radiation boundary.\n\nHPlane.model_disco()\n\nModel in PyDiscovery.\n\nHPlane.model_hfss()\n\nDraw H plane horn antenna.\n\nHPlane.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nHPlane.setup_disco()\n\nSet up model in PyDiscovery.\n\nHPlane.setup_hfss()\n\nSet up an antenna in HFSS.\n\nHPlane.synthesis()\n\nAntenna synthesis.\n\nHPlane.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nHPlane.antenna_type\n\n\n\nHPlane.coordinate_system\n\nReference coordinate system.\n\nHPlane.frequency\n\nCenter frequency.\n\nHPlane.frequency_unit\n\nFrequency units.\n\nHPlane.length_unit\n\nLength unit.\n\nHPlane.material\n\nHorn material.\n\nHPlane.material_properties\n\nSubstrate material properties.\n\nHPlane.name\n\nAntenna name.\n\nHPlane.origin\n\nAntenna origin.\n\nHPlane.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_hfss.html#setup_hfss",
        "title": "setup_hfss",
        "section": "setup_hfss",
        "text": "Set up an antenna in HFSS.\nsetup_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.setup_hfss",
        "title": "setup_hfss > setup_hfss > setup_hfss",
        "section": "setup_hfss > setup_hfss",
        "text": "QuadRidged.setup_hfss()\n\nSet up an antenna in HFSS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.set_variables_in_hfss.html#set_variables_in_hfss",
        "title": "set_variables_in_hfss",
        "section": "set_variables_in_hfss",
        "text": "Create HFSS design variables.\nset_variables_in_hfss"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.set_variables_in_hfss",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.set_variables_in_hfss.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.set_variables_in_hfss",
        "title": "set_variables_in_hfss > set_variables_in_hfss > set_variables_in_hfss",
        "section": "set_variables_in_hfss > set_variables_in_hfss",
        "text": "QuadRidged.set_variables_in_hfss(not_used=None)\n\nCreate HFSS design variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "AxialMode.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.EPlane.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "EPlane.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.serialize_obj_base64.html#serialize_obj_base64",
        "title": "serialize_obj_base64",
        "section": "serialize_obj_base64",
        "text": "Encode a bytes-like object.\nPath to the file to serialize.\nEncoded data.\nserialize_obj_base64\npython:str\nbytes"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.serialize_obj_base64",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.serialize_obj_base64.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.serialize_obj_base64",
        "title": "serialize_obj_base64 > serialize_obj_base64 > serialize_obj_base64",
        "section": "serialize_obj_base64 > serialize_obj_base64",
        "text": "static ToolkitBackend.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the file to serialize.\n\nReturns\n\nbytes\n\nEncoded data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.update_synthesis_parameters.html#update_synthesis_parameters",
        "title": "update_synthesis_parameters",
        "section": "update_synthesis_parameters",
        "text": "Update the synthesis parameter from the antenna list.\nupdate_synthesis_parameters"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.update_synthesis_parameters",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.update_synthesis_parameters.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.update_synthesis_parameters",
        "title": "update_synthesis_parameters > update_synthesis_parameters > update_synthesis_parameters",
        "section": "update_synthesis_parameters > update_synthesis_parameters",
        "text": "Archimedean.update_synthesis_parameters(new_params)\n\nUpdate the synthesis parameter from the antenna list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.init_model.html#init_model",
        "title": "init_model",
        "section": "init_model",
        "text": "Create a radiation boundary.\ninit_model"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.init_model",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.init_model.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.init_model",
        "title": "init_model > init_model > init_model",
        "section": "init_model > init_model",
        "text": "Archimedean.init_model()\n\nCreate a radiation boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.outer_boundary.html#outer_boundary",
        "title": "outer_boundary",
        "section": "outer_boundary",
        "text": "Outer boundary.\nouter_boundary\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.outer_boundary",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.outer_boundary.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.outer_boundary",
        "title": "outer_boundary > outer_boundary > outer_boundary",
        "section": "outer_boundary > outer_boundary",
        "text": "property HPlane.outer_boundary\n\nOuter boundary.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.antenna_type.html#antenna_type",
        "title": "antenna_type",
        "section": "antenna_type",
        "text": "antenna_type"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.antenna_type",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.antenna_type.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.antenna_type",
        "title": "antenna_type > antenna_type > antenna_type",
        "section": "antenna_type > antenna_type",
        "text": "AxialMode.antenna_type = ''\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.coordinate_system.html#coordinate_system",
        "title": "coordinate_system",
        "section": "coordinate_system",
        "text": "Reference coordinate system.\ncoordinate_system\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.coordinate_system",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.coordinate_system.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.coordinate_system",
        "title": "coordinate_system > coordinate_system > coordinate_system",
        "section": "coordinate_system > coordinate_system",
        "text": "property Pyramidal.coordinate_system\n\nReference coordinate system.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.synthesis.html#synthesis",
        "title": "synthesis",
        "section": "synthesis",
        "text": "Antenna synthesis.\nAnalytical parameters.\nsynthesis\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.synthesis",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.synthesis.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.synthesis",
        "title": "synthesis > synthesis > synthesis",
        "section": "synthesis > synthesis",
        "text": "BowTieNormal.synthesis()\n\nAntenna synthesis.\n\nReturns\n\npython:dict\n\nAnalytical parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.helix.AxialMode.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "AxialMode.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "RectangularPatchProbe.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_lattice_pair.html#create_lattice_pair",
        "title": "create_lattice_pair",
        "section": "create_lattice_pair",
        "text": "Create a lattice pair box.\nHeight of the lattice pair box.\nWhether to extend the lattice pair in the bottom side. The default is False.\n3D object.\ncreate_lattice_pair\npython:str\noptional\noptional\nFalse\nansys.aedt.core.modeler.object3d.Object3d"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_lattice_pair",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_lattice_pair.html#ansys.aedt.toolkits.antenna.backend.antenna_models.conical_spiral.Archimedean.create_lattice_pair",
        "title": "create_lattice_pair > create_lattice_pair > create_lattice_pair",
        "section": "create_lattice_pair > create_lattice_pair",
        "text": "Archimedean.create_lattice_pair(lattice_height=None, bottom_extend=False)\n\nCreate a lattice pair box.\n\nParameters\n\nlattice_height\n\npython:str, optional\n\nHeight of the lattice pair box.\n\nbottom_extend\n\nbool, optional\n\nWhether to extend the lattice pair in the bottom side. The default is False.\n\nReturns\n\nansys.aedt.core.modeler.object3d.Object3d\n\n3D object.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_lattice_pair(lattice_height=\"20mm\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.html#corrugated",
        "title": "Corrugated",
        "section": "Corrugated",
        "text": "Manages a corrugated horn antenna.\nThis class is accessible through the app hfss object [1].\nCenter frequency. The default is 10.0.\nFrequency units. The default is \"GHz\".\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\nLength units. The default is \"mm\".\nWhether to create a parametrized antenna.  The default is True.\nCorrugated horn object.\nC. Balanis, “Horn Antennas,” Antenna Theory Analysis,\n3rd ed. Hoboken: Wiley, 2005, sec. 13.6, pp. 785-791.\nCorrugated.create_3dcomponent([...])\nCreate a 3D component of the antenna.\nCorrugated.create_lattice_pair([...])\nCreate a lattice pair box.\nCorrugated.duplicate_along_line(vector[, ...])\nDuplicate the object along a line.\nCorrugated.init_model()\nCreate a radiation boundary.\nCorrugated.model_disco()\nModel in PyDiscovery.\nCorrugated.model_hfss()\nDraw a conical horn antenna.\nCorrugated.set_variables_in_hfss([not_used])\nCreate HFSS design variables.\nCorrugated.setup_disco()\nSet up in PyDiscovery.\nCorrugated.setup_hfss()\nSet up an antenna in HFSS.\nCorrugated.synthesis()\nAntenna synthesis.\nCorrugated.update_synthesis_parameters(...)\nUpdate the synthesis parameter from the antenna list.\nCorrugated.antenna_type\n\nCorrugated.coordinate_system\nReference coordinate system.\nCorrugated.frequency\nCenter frequency.\nCorrugated.frequency_unit\nFrequency units.\nCorrugated.length_unit\nLength unit.\nCorrugated.material\nHorn material.\nCorrugated.material_properties\nSubstrate material properties.\nCorrugated.name\nAntenna name.\nCorrugated.origin\nAntenna origin.\nCorrugated.outer_boundary\nOuter boundary.\nCorrugated\npython:float\noptional\n10.0\npython:str\noptional\n\"GHz\"\npython:str\noptional\nparametrized\n\"pec\"\npython:str\noptional\nNone\n\"FEBI\"\n\"PML\"\n\"Radiation\"\nNone\npython:str\noptional\n\"mm\"\noptional\nTrue\naedt.toolkits.antenna.CorrugatedHorn\nCorrugated.create_3dcomponent\nCorrugated.create_lattice_pair\nCorrugated.duplicate_along_line\nCorrugated.init_model\nCorrugated.model_disco\nCorrugated.model_hfss\nCorrugated.set_variables_in_hfss\nCorrugated.setup_disco\nCorrugated.setup_hfss\nCorrugated.synthesis\nCorrugated.update_synthesis_parameters\nCorrugated.antenna_type\nCorrugated.coordinate_system\nCorrugated.frequency\nCorrugated.frequency_unit\nCorrugated.length_unit\nCorrugated.material\nCorrugated.material_properties\nCorrugated.name\nCorrugated.origin\nCorrugated.outer_boundary"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated",
        "title": "Corrugated > Corrugated > Corrugated",
        "section": "Corrugated > Corrugated",
        "text": "class ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Corrugated(*args, **kwargs)\n\nManages a corrugated horn antenna.\n\nThis class is accessible through the app hfss object [1].\n\nParameters\n\nfrequency\n\npython:float, optional\n\nCenter frequency. The default is 10.0.\n\nfrequency_unit\n\npython:str, optional\n\nFrequency units. The default is \"GHz\".\n\nmaterial\n\npython:str, optional\n\nHorn material. If a material is not defined, a new material, parametrized, is defined.\nThe default is \"pec\".\n\nouter_boundary\n\npython:str, optional\n\nBoundary type to use. The default is None. Options are \"FEBI\", \"PML\",\n\"Radiation\", and None.\n\nlength_unit\n\npython:str, optional\n\nLength units. The default is \"mm\".\n\nparametrized\n\nbool, optional\n\nWhether to create a parametrized antenna.  The default is True.\n\nReturns\n\naedt.toolkits.antenna.CorrugatedHorn\n\nCorrugated horn object.\n\nNotes\n\n1\n\nC. Balanis, “Horn Antennas,” Antenna Theory Analysis,\n3rd ed. Hoboken: Wiley, 2005, sec. 13.6, pp. 785-791.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Corrugated\n>>> import ansys.aedt.core\n>>> app = ansys.aedt.core.Hfss()\n>>> oantenna1 = Corrugated(app)\n>>> oantenna1.frequency = 12.0\n>>> oantenna1.model_hfss()\n>>> oantenna1.setup_hfss()\n>>> app.release_desktop(False, False)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCorrugated.create_3dcomponent([...])\n\nCreate a 3D component of the antenna.\n\nCorrugated.create_lattice_pair([...])\n\nCreate a lattice pair box.\n\nCorrugated.duplicate_along_line(vector[, ...])\n\nDuplicate the object along a line.\n\nCorrugated.init_model()\n\nCreate a radiation boundary.\n\nCorrugated.model_disco()\n\nModel in PyDiscovery.\n\nCorrugated.model_hfss()\n\nDraw a conical horn antenna.\n\nCorrugated.set_variables_in_hfss([not_used])\n\nCreate HFSS design variables.\n\nCorrugated.setup_disco()\n\nSet up in PyDiscovery.\n\nCorrugated.setup_hfss()\n\nSet up an antenna in HFSS.\n\nCorrugated.synthesis()\n\nAntenna synthesis.\n\nCorrugated.update_synthesis_parameters(...)\n\nUpdate the synthesis parameter from the antenna list.\n\n\n\nAttributes\n\n\n\n\n\n\n\nCorrugated.antenna_type\n\n\n\nCorrugated.coordinate_system\n\nReference coordinate system.\n\nCorrugated.frequency\n\nCenter frequency.\n\nCorrugated.frequency_unit\n\nFrequency units.\n\nCorrugated.length_unit\n\nLength unit.\n\nCorrugated.material\n\nHorn material.\n\nCorrugated.material_properties\n\nSubstrate material properties.\n\nCorrugated.name\n\nAntenna name.\n\nCorrugated.origin\n\nAntenna origin.\n\nCorrugated.outer_boundary\n\nOuter boundary.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_disco.html#setup_disco",
        "title": "setup_disco",
        "section": "setup_disco",
        "text": "Set up the model in PyDiscovery. To be implemented.\nsetup_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieNormal.setup_disco",
        "title": "setup_disco > setup_disco > setup_disco",
        "section": "setup_disco > setup_disco",
        "text": "BowTieNormal.setup_disco()\n\nSet up the model in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Antenna name.\nname\npython:str"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.name",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.name.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.Pyramidal.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Pyramidal.name\n\nAntenna name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_disco.html#model_disco",
        "title": "model_disco",
        "section": "model_disco",
        "text": "Model in PyDiscovery. To be implemented.\nmodel_disco"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_disco",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_disco.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.HPlane.model_disco",
        "title": "model_disco > model_disco > model_disco",
        "section": "model_disco > model_disco",
        "text": "HPlane.model_disco()\n\nModel in PyDiscovery. To be implemented.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.is_aedt_connected",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.is_aedt_connected.html#is_aedt_connected",
        "title": "is_aedt_connected",
        "section": "is_aedt_connected",
        "text": "Check if AEDT is connected.\nTuple indicating the connection status and a message.\nis_aedt_connected\npython:tuple\npython:str"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.is_aedt_connected",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.is_aedt_connected.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.is_aedt_connected",
        "title": "is_aedt_connected > is_aedt_connected > is_aedt_connected",
        "section": "is_aedt_connected > is_aedt_connected",
        "text": "ToolkitBackend.is_aedt_connected() -> Tuple[bool, str]\n\nCheck if AEDT is connected.\n\nReturns\n\npython:tuple[bool, python:str]\n\nTuple indicating the connection status and a message.\n\nExamples\n\n>>> from ansys.aedt.toolkits.common.backend.api import AEDTCommon\n>>> toolkit_api = AEDTCommon()\n>>> toolkit_api.launch_aedt()\n>>> toolkit_api.wait_to_be_idle()\n>>> toolkit_api.connect_aedt()\n>>> toolkit_api.is_aedt_connected()\n(True, \"toolkit connected to process <process_id> on Grpc <grpc_port>\")\n>>> toolkit_api.release_aedt()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_3dcomponent.html#create_3dcomponent",
        "title": "create_3dcomponent",
        "section": "create_3dcomponent",
        "text": "Create a 3D component of the antenna.\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\nName of the component. The default is the antenna name.\nWhether to eplace the antenna with a 3D component. The default is False.\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\ncreate_3dcomponent\npython:str\noptional\nansys.aedt.core\npython:str\noptional\noptional\nFalse\npython:str\nansys.aedt.core.modeler.components_3d.UserDefinedComponent"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_3dcomponent",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_3dcomponent.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.create_3dcomponent",
        "title": "create_3dcomponent > create_3dcomponent > create_3dcomponent",
        "section": "create_3dcomponent > create_3dcomponent",
        "text": "BowTieSlot.create_3dcomponent(component_file=None, component_name=None, replace=False)\n\nCreate a 3D component of the antenna.\n\nParameters\n\ncomponent_file\n\npython:str, optional\n\nFull path to the A3DCOMP file. The default is the ansys.aedt.core folder.\n\ncomponent_name\n\npython:str, optional\n\nName of the component. The default is the antenna name.\n\nreplace\n\nbool, optional\n\nWhether to eplace the antenna with a 3D component. The default is False.\n\nReturns\n\npython:str\n\nPath of the 3D component file or\nansys.aedt.core.modeler.components_3d.UserDefinedComponent.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> horn = horn.create_3dcomponent()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.origin.html#origin",
        "title": "origin",
        "section": "origin",
        "text": "Antenna origin.\norigin\npython:list"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.origin",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.origin.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchInset.origin",
        "title": "origin > origin > origin",
        "section": "origin > origin",
        "text": "property RectangularPatchInset.origin\n\nAntenna origin.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.horn.QuadRidged.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "QuadRidged.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.duplicate_along_line.html#duplicate_along_line",
        "title": "duplicate_along_line",
        "section": "duplicate_along_line",
        "text": "Duplicate the object along a line.\nList of [x1 ,y1, z1] coordinates for the vector.\nNumber of clones. The default is 2.\nDictionary with the list of new objects.\nduplicate_along_line\npython:list\n[x1 ,y1, z1]\npython:int\noptional\n2\npython:dict"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.duplicate_along_line",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.duplicate_along_line.html#ansys.aedt.toolkits.antenna.backend.antenna_models.patch.RectangularPatchProbe.duplicate_along_line",
        "title": "duplicate_along_line > duplicate_along_line > duplicate_along_line",
        "section": "duplicate_along_line > duplicate_along_line",
        "text": "RectangularPatchProbe.duplicate_along_line(vector, num_clones=2)\n\nDuplicate the object along a line.\n\nParameters\n\nvector\n\npython:list\n\nList of [x1 ,y1, z1] coordinates for the vector.\n\nnum_clones\n\npython:int, optional\n\nNumber of clones. The default is 2.\n\nReturns\n\npython:dict\n\nDictionary with the list of new objects.\n\nExamples\n\n>>> from ansys.aedt.core import Hfss\n>>> from ansys.aedt.toolkits.antenna.backend.antenna_models.horn import Conical\n>>> hfss = Hfss()\n>>> horn = hfss.add_from_toolkit(Conical, draw=True)\n>>> new_horn = horn.duplicate_along_line([10, 0, 0], 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.html#toolkitbackend",
        "title": "ToolkitBackend",
        "section": "ToolkitBackend",
        "text": "Provides methods for controlling the toolkit workflow.\nThis class provides methods for creating an AEDT session, connecting to an existing\nAEDT session, and synthesizing and creating an antenna in HFSS.\nToolkitBackend.aedt_sessions()\nGet information for the active AEDT sessions.\nToolkitBackend.analyze()\nAnalyze the design.\nToolkitBackend.connect_aedt()\nConnect to an existing AEDT session.\nToolkitBackend.connect_design([app_name])\nConnect to an application design.\nToolkitBackend.export_aedt_model([obj_list, ...])\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\nToolkitBackend.export_farfield([...])\nExport far field data and then encode the file if the encode parameter is enabled.\nToolkitBackend.get_antenna(antenna[, synth_only])\nSynthesize and create an antenna in HFSS.\nToolkitBackend.get_design_names()\nGet the design names for a specific project.\nToolkitBackend.get_project_name(project_path)\nGet the project name from the project path.\nToolkitBackend.get_properties()\nGet the toolkit properties.\nToolkitBackend.get_thread_status()\nGet the toolkit thread status.\nToolkitBackend.installed_aedt_version()\nGet the installed AEDT versions.\nToolkitBackend.is_aedt_connected()\nCheck if AEDT is connected.\nToolkitBackend.launch_aedt()\nLaunch AEDT.\nToolkitBackend.launch_thread(process, *args)\nLaunch the thread.\nToolkitBackend.open_project([project_name])\nOpen an AEDT project.\nToolkitBackend.release_aedt([...])\nRelease AEDT.\nToolkitBackend.save_project([project_path, ...])\nSave the project.\nToolkitBackend.scattering_results()\nGet antenna scattering results.\nToolkitBackend.serialize_obj_base64(file_path)\nEncode a bytes-like object.\nToolkitBackend.set_properties(data)\nAssign the passed data to the internal data model.\nToolkitBackend.update_hfss_parameters(key, val)\nUpdate parameters in HFSS.\nToolkitBackend.wait_to_be_idle([timeout])\nWait for the thread to be idle and ready to accept a new task.\nToolkitBackend\nToolkitBackend.aedt_sessions\nToolkitBackend.analyze\nToolkitBackend.connect_aedt\nToolkitBackend.connect_design\nToolkitBackend.export_aedt_model\nencode\nToolkitBackend.export_farfield\nencode\nToolkitBackend.get_antenna\nToolkitBackend.get_design_names\nToolkitBackend.get_project_name\nToolkitBackend.get_properties\nToolkitBackend.get_thread_status\nToolkitBackend.installed_aedt_version\nToolkitBackend.is_aedt_connected\nToolkitBackend.launch_aedt\nToolkitBackend.launch_thread\nToolkitBackend.open_project\nToolkitBackend.release_aedt\nToolkitBackend.save_project\nToolkitBackend.scattering_results\nToolkitBackend.serialize_obj_base64\nToolkitBackend.set_properties\nToolkitBackend.update_hfss_parameters\nToolkitBackend.wait_to_be_idle"
    },
    {
        "objectID": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend",
        "href": "toolkit/_autosummary/ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend.html#ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend",
        "title": "ToolkitBackend > ToolkitBackend > ToolkitBackend",
        "section": "ToolkitBackend > ToolkitBackend",
        "text": "class ansys.aedt.toolkits.antenna.backend.api.ToolkitBackend\n\nProvides methods for controlling the toolkit workflow.\n\nThis class provides methods for creating an AEDT session, connecting to an existing\nAEDT session, and synthesizing and creating an antenna in HFSS.\n\nExamples\n\n>>> from ansys.aedt.toolkits.antenna.backend.api import ToolkitBackend\n>>> import time\n>>> toolkit = ToolkitBackend()\n>>> msg1 = toolkit.launch_aedt()\n>>> toolkit.wait_to_be_idle()\n>>> toolkit.get_antenna(\"BowTie\")\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nToolkitBackend.aedt_sessions()\n\nGet information for the active AEDT sessions.\n\nToolkitBackend.analyze()\n\nAnalyze the design.\n\nToolkitBackend.connect_aedt()\n\nConnect to an existing AEDT session.\n\nToolkitBackend.connect_design([app_name])\n\nConnect to an application design.\n\nToolkitBackend.export_aedt_model([obj_list, ...])\n\nExport the model in the OBJ format and then encode the file if the encode parameter is enabled.\n\nToolkitBackend.export_farfield([...])\n\nExport far field data and then encode the file if the encode parameter is enabled.\n\nToolkitBackend.get_antenna(antenna[, synth_only])\n\nSynthesize and create an antenna in HFSS.\n\nToolkitBackend.get_design_names()\n\nGet the design names for a specific project.\n\nToolkitBackend.get_project_name(project_path)\n\nGet the project name from the project path.\n\nToolkitBackend.get_properties()\n\nGet the toolkit properties.\n\nToolkitBackend.get_thread_status()\n\nGet the toolkit thread status.\n\nToolkitBackend.installed_aedt_version()\n\nGet the installed AEDT versions.\n\nToolkitBackend.is_aedt_connected()\n\nCheck if AEDT is connected.\n\nToolkitBackend.launch_aedt()\n\nLaunch AEDT.\n\nToolkitBackend.launch_thread(process, *args)\n\nLaunch the thread.\n\nToolkitBackend.open_project([project_name])\n\nOpen an AEDT project.\n\nToolkitBackend.release_aedt([...])\n\nRelease AEDT.\n\nToolkitBackend.save_project([project_path, ...])\n\nSave the project.\n\nToolkitBackend.scattering_results()\n\nGet antenna scattering results.\n\nToolkitBackend.serialize_obj_base64(file_path)\n\nEncode a bytes-like object.\n\nToolkitBackend.set_properties(data)\n\nAssign the passed data to the internal data model.\n\nToolkitBackend.update_hfss_parameters(key, val)\n\nUpdate parameters in HFSS.\n\nToolkitBackend.wait_to_be_idle([timeout])\n\nWait for the thread to be idle and ready to accept a new task.\n\n"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.substrate_height.html#substrate_height",
        "title": "substrate_height",
        "section": "substrate_height",
        "text": "Substrate height.\nsubstrate_height\npython:float"
    },
    {
        "objectID": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.substrate_height",
        "href": "toolkit/models/_autosummary/ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.substrate_height.html#ansys.aedt.toolkits.antenna.backend.antenna_models.bowtie.BowTieSlot.substrate_height",
        "title": "substrate_height > substrate_height > substrate_height",
        "section": "substrate_height > substrate_height",
        "text": "property BowTieSlot.substrate_height\n\nSubstrate height.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "End-to-end examples show how to use the API of the AEDT Antenna Toolkit.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#antenna-synthesis",
        "title": "Examples > Antenna synthesis",
        "section": "Antenna synthesis",
        "text": "These examples show how to use the different antenna classes:\nAntenna synthesis"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#antenna-toolkit",
        "title": "Examples > Antenna toolkit",
        "section": "Antenna toolkit",
        "text": "These examples show how to use the ToolkitBackend class:\nAntenna toolkit\nToolkitBackend"
    }
]