name: "CI"
on:
  pull_request:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'aedt.antenna.toolkit.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-aedt-toolkits-antenna'
  LIBRARY_NAMESPACE: 'ansys.aedt.toolkits.antenna'
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  ON_CI: True

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v9
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-dependabot:
    name: "Block dependabot (on dependabot PR)"
    runs-on: ubuntu-latest
    steps:
      - name: Exit if dependabot triggered the workflow
        if: github.triggering_actor == 'dependabot[bot]'
        run: |
          echo "::warning::Dependabot is not allowed to trigger this workflow. Please review carefully the changes before running the workflow manually."
          exit 1

  # NOTE: We do not allow pyansys-ci-bot to trigger the CI/CD pipeline automatically
  # on dependabot's PR. This is to mitigate supply chain attacks, where a malicious
  # dependency update could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-pyansys-ci-bot:
    name: "Block PyAnsys-CI-bot (on dependabot PR)"
    needs: block-dependabot
    runs-on: ubuntu-latest
    steps:
      - name: Exit if pyansys-ci-bot triggered the workflow on dependabot's PR
        if: github.triggering_actor == 'pyansys-ci-bot' && startsWith(github.head_ref, 'dependabot')
        run: |
          echo "::warning::PyAnsys CI bot is not allowed to trigger this workflow in dependabot's PR. Please review carefully the changes before running the workflow manually."
          exit 1

  pr-title:
    name: Check the title of the PR (if needed)
    runs-on: ubuntu-latest
    needs: [block-pyansys-ci-bot]
    steps:
      - name: Check the title of the pull request
        if: github.event_name == 'pull_request'
        uses: ansys/actions/check-pr-title@v9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          use-upper-case: true
      - name: Check the title of the pull request
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "::notice::Skipping PR title check for non-PR events"

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: [pr-title]
    steps:
      - uses: ansys/actions/code-style@v9
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  build-application-windows:
    name: "Build Windows Application"
    runs-on: windows-latest
    needs: [code-style]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install Dependencies
        run: pip install .[freeze]

      - name: Extract version
        run: |
          python installer/extract_version.py

      - name: Freeze application
        run: pyinstaller frozen.spec

      - name: Install NSIS
        run: choco install nsis -y

      - name: Debug build directory
        run: Get-ChildItem -Path build -Recurse | ForEach-Object { $_.FullName }

      - name: Print NSIS version
        run: makensis -VERSION

      - name: Run NSIS
        shell: pwsh
        if: always()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          if (!(Test-Path -Path "setup.nsi")) {
            Write-Error "setup.nsi not found"
          }
          makensis setup.nsi

      - name: List output
        run: ls -R dist

      - uses: actions/upload-artifact@v4
        with:
          name: Antenna-Toolkit-windows
          path: dist/*.exe

  build-application-linux-debian:
    strategy:
      matrix:
        os: [ "24.04", "22.04"]
      fail-fast: false
    name: "Build Application Linux - Ubuntu ${{ matrix.os }}"
    runs-on: ubuntu-${{ matrix.os }}
    needs: [code-style]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install Linux Dependencies
        run: |
          sudo apt update
          sudo apt install aptitude -y;
          sudo aptitude install libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-glx0-dev \
            libxcb-keysyms1-dev \
            libxcb-image0-dev \
            libxcb-shm0-dev \
            libxcb-icccm4-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-cursor-dev \
            libxcb-util-dev \
            libxcb-xkb-dev \
            libxcb-xinerama0-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            -y
          sudo apt install ruby -y
          sudo gem install fpm

      - name: Install Python Dependencies
        run: pip install .[freeze]

      - name: Extract version
        run: |
          set -e
          python installer/extract_version.py

      - name: Freeze application
        env:
          ADD_PYTHON_BINARIES: true
        run: pyinstaller frozen.spec

      - name: Setup and Copy Linux files for packaging
        run: |
          mkdir -p package/opt
          mkdir -p package/share/applications
          mkdir -p package/share/icons
          cp -r dist/antenna_toolkit package/opt/antenna_toolkit
          cp installer/assets/splash_icon.svg package/share/icons/splash_icon.svg
          cp installer/linux/debian/antenna_toolkit_prebuild.desktop package/share/applications
          find package/opt/antenna_toolkit -type f -exec chmod 644 -- {} +
          find package/opt/antenna_toolkit -type d -exec chmod 755 -- {} +
          find package/share -type f -exec chmod 644 -- {} +
          chmod +x package/opt/antenna_toolkit/antenna_toolkit
          chmod +x package/opt/antenna_toolkit/_internal/assets/uninstaller_ubuntu.sh
          version=v`cat ./installer/VERSION`
          echo "APPLICATION_VERSION=$version" >> $GITHUB_ENV
          set -x  # Debug mode
          fpm -v $version --fpm-options-file installer/linux/debian/fpm-options-debian

      - name: Create zip file
        run: |
          cp installer/linux/debian/installer.sh installer.sh
          cp installer/linux/debian/postInstallScript.sh postInstallScript.sh
          chmod +x installer.sh postInstallScript.sh antenna_toolkit.deb
          version=$(cat ./installer/VERSION)
          os_version_processed=$(echo "${{ matrix.os }}" | sed 's/\./_/g')
          zip_name="Ansys-Antenna-Toolkit_linux_${os_version_processed}_v${version}.zip"
          echo "OS_VERSION_PROCESSED=${os_version_processed}" >> $GITHUB_ENV
          echo "APPLICATION_VERSION=v${version}" >> $GITHUB_ENV
          zip -r $zip_name antenna_toolkit.deb installer.sh postInstallScript.sh

      - uses: actions/upload-artifact@v4
        with:
           name: Antenna-Toolkit-ubuntu_${{ matrix.os }}
           path: Ansys-Antenna-Toolkit_linux_${{ env.OS_VERSION_PROCESSED }}_${{ env.APPLICATION_VERSION }}.zip

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    needs: [pr-title]
    steps:
      - uses: ansys/actions/doc-style@v9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "3.4.1"

  doc-build:
    name: "Build documentation"
    runs-on: [self-hosted, pyaedt, toolkits, Windows]
    needs: [ doc-style ]
    timeout-minutes: 30
    steps:
      - name: Build documentation
        uses: ansys/actions/doc-build@v9
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          add-pdf-html-docs-as-assets: true
          check-links: true

  smoke-tests:
    name: "Build and Smoke tests"
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        python-version: [ '3.10' ]
    runs-on: ${{ matrix.os }}
    needs: [ code-style ]
    steps:
      - uses: ansys/actions/build-wheelhouse@v9
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          whitelist-license-check: 'jeepney'

  tests_windows:
    name: "Windows Tests"
    strategy:
      matrix:
        python-version: [ '3.10' ]
      fail-fast: false
    runs-on: [self-hosted, pyaedt, toolkits, Windows]
    needs: [smoke-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Antenna models testing
        timeout-minutes: 30
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m antenna_models_common_api --cov
          pytest -v -m antenna_models_api --cov --cov-append

      - name: Toolkit API testing
        timeout-minutes: 30
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m antenna_toolkit_api --cov --cov-append

      - name: Toolkit REST API testing
        timeout-minutes: 30
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v -m antenna_toolkit_rest_api --cov --cov-append

      - name: "Combine coverage files"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m coverage html -d .cov\total-html
          python -m coverage xml -o .cov\total.xml

      - name: "Upload coverage results"
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION  }}
        uses: actions/upload-artifact@v4
        with:
          path: .cov/total-html
          name: html-total-coverage

      - name: "Upload coverage report to codecov"
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION }}
        uses: codecov/codecov-action@v5
        with:
          file: .cov/total.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tests_linux:
    name: "Linux Tests"
    strategy:
      matrix:
        python-version: [ '3.10' ]
      fail-fast: false
    runs-on: [self-hosted, pyaedt, toolkits, Linux]
    needs: [ smoke-tests ]
    env:
      ANSYSEM_ROOT251: '/opt/AnsysEM/v251/AnsysEM'
      ANS_NODEPCHECK: '1'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create Python venv
        run: |
          python -m venv .venv_linux

      - name: Install packages for testing
        run: |
          source .venv_linux/bin/activate
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip -U
          python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org wheel setuptools -U
          python -c "import sys; print(sys.executable)"
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]
          pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pytest-azurepipelines

      - name: Antenna models testing
        timeout-minutes: 5
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m antenna_models_common_api
          pytest -v -m antenna_models_api

      - name: Toolkit API testing
        timeout-minutes: 30
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m antenna_toolkit_api

      - name: Toolkit REST API testing
        timeout-minutes: 30
        run: |
          export LD_LIBRARY_PATH=${{ env.ANSYSEM_ROOT242 }}/common/mono/Linux64/lib64:$LD_LIBRARY_PATH
          source .venv_linux/bin/activate
          pytest -v -m antenna_toolkit_rest_api





  build-library:
    name: "Build library artifacts"
    runs-on: ubuntu-latest
    needs: [ doc-build, tests_windows, tests_linux ]
    steps:
      - uses: ansys/actions/build-library@v9
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library, build-application-windows, build-application-linux-debian]
    runs-on: ubuntu-latest
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Download the library artifacts from build-library step
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: ${{ env.LIBRARY_NAME }}-artifacts

      - name: Release to PyPI using trusted publisher
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.LIBRARY_NAME }}-artifacts
          skip-existing: false

      - name: Download Windows EXE
        uses: actions/download-artifact@v4
        with:
          name: Antenna-Toolkit-windows
          path: installer

      - name: Download Ubuntu 22.04 ZIP
        uses: actions/download-artifact@v4
        with:
          name: Antenna-Toolkit-ubuntu_22.04
          path: installer

      - name: Download Ubuntu 24.04 ZIP
        uses: actions/download-artifact@v4
        with:
          name: Antenna-Toolkit-ubuntu_24.04
          path: installer

      - name: Release to GitHub
        uses: ansys/actions/release-github@v9
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: false
          additional-artifacts: |
            installer/Antenna-Toolkit-windows.exe
            installer/Antenna-Toolkit-ubuntu_22.04.zip
            installer/Antenna-Toolkit-ubuntu_24.04.zip


  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: build-library
    if: github.event_name == 'push'
    steps:
      - uses: ansys/actions/doc-deploy-dev@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}